
BikeRollers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000e7a  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000d4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000013e  00800100  00800100  00000e7a  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00000e7a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000ea9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001105  00000000  00000000  00000f39  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000729  00000000  00000000  0000203e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000690  00000000  00000000  00002767  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001e8  00000000  00000000  00002df8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00002fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000041f  00000000  00000000  000031e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00003607  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000e02  00000e02  00000e76  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003688  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.pinMode 000000c2  00000804  00000804  00000878  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.digitalRead 00000060  00000b1c  00000b1c  00000b90  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.digitalWrite 00000108  0000039e  0000039e  00000412  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__vector_1 00000076  00000aa6  00000aa6  00000b1a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.setPinModes 000000de  000004a6  000004a6  0000051a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.setPwmTimers 0000001a  00000d5c  00000d5c  00000dd0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.setAnalogInputs 00000030  00000cc0  00000cc0  00000d34  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.setSampleTimer 00000024  00000d16  00000d16  00000d8a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.sampleInputs 000001a8  000000d4  000000d4  00000148  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.getTargetCurrent 000000b8  000008c6  000008c6  0000093a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.updateMotorPID 00000122  0000027c  0000027c  000002f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.updateResistorPID 00000012  00000d76  00000d76  00000dea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.__vector_9 0000005a  00000bda  00000bda  00000c4e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.updateAnalogInputs 000000ae  0000097e  0000097e  000009f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.main    00000026  00000cf0  00000cf0  00000d64  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.avrlibc.fplib 0000000e  00000d88  00000d88  00000dfc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.avrlibc.fplib 000000ce  00000736  00000736  000007aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.avrlibc.fplib 0000000a  00000dd8  00000dd8  00000e4c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.avrlibc.fplib 00000008  00000dec  00000dec  00000e60  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.avrlibc.fplib 000000de  00000584  00000584  000005f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.avrlibc.fplib 0000005e  00000b7c  00000b7c  00000bf0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.avrlibc.fplib 0000007a  00000a2c  00000a2c  00000aa0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.avrlibc.fplib 00000048  00000c34  00000c34  00000ca8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.avrlibc.fplib 0000000c  00000dc0  00000dc0  00000e34  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.avrlibc.fplib 00000006  00000dfc  00000dfc  00000e70  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.avrlibc.fplib 0000000e  00000d96  00000d96  00000e0a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.avrlibc.fplib 0000000e  00000da4  00000da4  00000e18  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.avrlibc.fplib 00000022  00000d3a  00000d3a  00000dae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.avrlibc.fplib 00000044  00000c7c  00000c7c  00000cf0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.avrlibc.fplib 0000000e  00000db2  00000db2  00000e26  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.avrlibc.fplib 0000000a  00000de2  00000de2  00000e56  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.avrlibc.fplib 00000008  00000df4  00000df4  00000e68  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.avrlibc.fplib 000000d4  00000662  00000662  000006d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.libgcc  0000000c  00000dcc  00000dcc  00000e40  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 40 00 	jmp	0x80	; 0x80 <__ctors_end>
   4:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <__vector_1>
   8:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__bad_interrupt>
   c:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__bad_interrupt>
  10:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__bad_interrupt>
  14:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__bad_interrupt>
  18:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__bad_interrupt>
  1c:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__bad_interrupt>
  20:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__bad_interrupt>
  24:	0c 94 ed 05 	jmp	0xbda	; 0xbda <__vector_9>
  28:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__bad_interrupt>
  2c:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__bad_interrupt>
  30:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__bad_interrupt>
  34:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__bad_interrupt>
  38:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__bad_interrupt>
  3c:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__bad_interrupt>
  40:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__bad_interrupt>
  44:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__bad_interrupt>
  48:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__bad_interrupt>
  4c:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__bad_interrupt>
  50:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__bad_interrupt>
  54:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__bad_interrupt>
  58:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__bad_interrupt>
  5c:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__bad_interrupt>
  60:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__bad_interrupt>
  64:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__bad_interrupt>
  68:	cf 04       	cpc	r12, r15
  6a:	d7 04       	cpc	r13, r7
  6c:	df 04       	cpc	r13, r15
  6e:	e7 04       	cpc	r14, r7
  70:	ef 04       	cpc	r14, r15
  72:	06 05       	cpc	r16, r6
  74:	06 05       	cpc	r16, r6
  76:	f7 04       	cpc	r15, r7
  78:	ff 04       	cpc	r15, r15

0000007a <.dinit>:
  7a:	01 00       	.word	0x0001	; ????
  7c:	02 3e       	cpi	r16, 0xE2	; 226
  7e:	80 00       	.word	0x0080	; ????

00000080 <__ctors_end>:
  80:	11 24       	eor	r1, r1
  82:	1f be       	out	0x3f, r1	; 63
  84:	cf ef       	ldi	r28, 0xFF	; 255
  86:	d8 e0       	ldi	r29, 0x08	; 8
  88:	de bf       	out	0x3e, r29	; 62
  8a:	cd bf       	out	0x3d, r28	; 61

0000008c <__do_copy_data>:
  8c:	ea e7       	ldi	r30, 0x7A	; 122
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	40 e0       	ldi	r20, 0x00	; 0
  92:	17 c0       	rjmp	.+46     	; 0xc2 <__do_clear_bss+0x8>
  94:	b5 91       	lpm	r27, Z+
  96:	a5 91       	lpm	r26, Z+
  98:	35 91       	lpm	r19, Z+
  9a:	25 91       	lpm	r18, Z+
  9c:	05 91       	lpm	r16, Z+
  9e:	07 fd       	sbrc	r16, 7
  a0:	0c c0       	rjmp	.+24     	; 0xba <__do_clear_bss>
  a2:	95 91       	lpm	r25, Z+
  a4:	85 91       	lpm	r24, Z+
  a6:	ef 01       	movw	r28, r30
  a8:	f9 2f       	mov	r31, r25
  aa:	e8 2f       	mov	r30, r24
  ac:	05 90       	lpm	r0, Z+
  ae:	0d 92       	st	X+, r0
  b0:	a2 17       	cp	r26, r18
  b2:	b3 07       	cpc	r27, r19
  b4:	d9 f7       	brne	.-10     	; 0xac <__do_copy_data+0x20>
  b6:	fe 01       	movw	r30, r28
  b8:	04 c0       	rjmp	.+8      	; 0xc2 <__do_clear_bss+0x8>

000000ba <__do_clear_bss>:
  ba:	1d 92       	st	X+, r1
  bc:	a2 17       	cp	r26, r18
  be:	b3 07       	cpc	r27, r19
  c0:	e1 f7       	brne	.-8      	; 0xba <__do_clear_bss>
  c2:	ef 37       	cpi	r30, 0x7F	; 127
  c4:	f4 07       	cpc	r31, r20
  c6:	31 f7       	brne	.-52     	; 0x94 <__do_copy_data+0x8>
  c8:	0e 94 78 06 	call	0xcf0	; 0xcf0 <main>
  cc:	0c 94 68 00 	jmp	0xd0	; 0xd0 <_exit>

000000d0 <_exit>:
  d0:	f8 94       	cli

000000d2 <__stop_program>:
  d2:	ff cf       	rjmp	.-2      	; 0xd2 <__stop_program>

Disassembly of section .text:

00000e02 <__bad_interrupt>:
 e02:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.pinMode:

00000804 <pinMode>:
void pinMode(char port, uint8_t pin, int type) {
	switch (port) {
 804:	83 34       	cpi	r24, 0x43	; 67
 806:	21 f1       	breq	.+72     	; 0x850 <pinMode+0x4c>
 808:	84 34       	cpi	r24, 0x44	; 68
 80a:	09 f4       	brne	.+2      	; 0x80e <pinMode+0xa>
 80c:	3f c0       	rjmp	.+126    	; 0x88c <pinMode+0x88>
 80e:	82 34       	cpi	r24, 0x42	; 66
 810:	09 f0       	breq	.+2      	; 0x814 <pinMode+0x10>
 812:	58 c0       	rjmp	.+176    	; 0x8c4 <pinMode+0xc0>
		case 'B':
			if (type == INPUT) {
 814:	43 30       	cpi	r20, 0x03	; 3
 816:	51 05       	cpc	r21, r1
 818:	69 f4       	brne	.+26     	; 0x834 <pinMode+0x30>
				DDRB &= ~(1 << pin);
 81a:	24 b1       	in	r18, 0x04	; 4
 81c:	81 e0       	ldi	r24, 0x01	; 1
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	06 2e       	mov	r0, r22
 822:	02 c0       	rjmp	.+4      	; 0x828 <pinMode+0x24>
 824:	88 0f       	add	r24, r24
 826:	99 1f       	adc	r25, r25
 828:	0a 94       	dec	r0
 82a:	e2 f7       	brpl	.-8      	; 0x824 <pinMode+0x20>
 82c:	80 95       	com	r24
 82e:	82 23       	and	r24, r18
 830:	84 b9       	out	0x04, r24	; 4
 832:	0e c0       	rjmp	.+28     	; 0x850 <pinMode+0x4c>
			} else if (type == OUTPUT) {
 834:	44 30       	cpi	r20, 0x04	; 4
 836:	51 05       	cpc	r21, r1
 838:	59 f4       	brne	.+22     	; 0x850 <pinMode+0x4c>
				DDRB |= (1 << pin);
 83a:	24 b1       	in	r18, 0x04	; 4
 83c:	81 e0       	ldi	r24, 0x01	; 1
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	06 2e       	mov	r0, r22
 842:	02 c0       	rjmp	.+4      	; 0x848 <pinMode+0x44>
 844:	88 0f       	add	r24, r24
 846:	99 1f       	adc	r25, r25
 848:	0a 94       	dec	r0
 84a:	e2 f7       	brpl	.-8      	; 0x844 <pinMode+0x40>
 84c:	82 2b       	or	r24, r18
 84e:	84 b9       	out	0x04, r24	; 4
			}
		case 'C':
			if (type == INPUT) {
 850:	43 30       	cpi	r20, 0x03	; 3
 852:	51 05       	cpc	r21, r1
 854:	69 f4       	brne	.+26     	; 0x870 <pinMode+0x6c>
				DDRC &= ~(1 << pin);
 856:	27 b1       	in	r18, 0x07	; 7
 858:	81 e0       	ldi	r24, 0x01	; 1
 85a:	90 e0       	ldi	r25, 0x00	; 0
 85c:	06 2e       	mov	r0, r22
 85e:	02 c0       	rjmp	.+4      	; 0x864 <pinMode+0x60>
 860:	88 0f       	add	r24, r24
 862:	99 1f       	adc	r25, r25
 864:	0a 94       	dec	r0
 866:	e2 f7       	brpl	.-8      	; 0x860 <pinMode+0x5c>
 868:	80 95       	com	r24
 86a:	82 23       	and	r24, r18
 86c:	87 b9       	out	0x07, r24	; 7
 86e:	0e c0       	rjmp	.+28     	; 0x88c <pinMode+0x88>
			} else if (type == OUTPUT) {
 870:	44 30       	cpi	r20, 0x04	; 4
 872:	51 05       	cpc	r21, r1
 874:	59 f4       	brne	.+22     	; 0x88c <pinMode+0x88>
				DDRC |= (1 << pin);
 876:	27 b1       	in	r18, 0x07	; 7
 878:	81 e0       	ldi	r24, 0x01	; 1
 87a:	90 e0       	ldi	r25, 0x00	; 0
 87c:	06 2e       	mov	r0, r22
 87e:	02 c0       	rjmp	.+4      	; 0x884 <pinMode+0x80>
 880:	88 0f       	add	r24, r24
 882:	99 1f       	adc	r25, r25
 884:	0a 94       	dec	r0
 886:	e2 f7       	brpl	.-8      	; 0x880 <pinMode+0x7c>
 888:	82 2b       	or	r24, r18
 88a:	87 b9       	out	0x07, r24	; 7
			}		
		case 'D':
			if (type == INPUT) {
 88c:	43 30       	cpi	r20, 0x03	; 3
 88e:	51 05       	cpc	r21, r1
 890:	61 f4       	brne	.+24     	; 0x8aa <pinMode+0xa6>
				DDRD &= ~(1 << pin);
 892:	2a b1       	in	r18, 0x0a	; 10
 894:	81 e0       	ldi	r24, 0x01	; 1
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	02 c0       	rjmp	.+4      	; 0x89e <pinMode+0x9a>
 89a:	88 0f       	add	r24, r24
 89c:	99 1f       	adc	r25, r25
 89e:	6a 95       	dec	r22
 8a0:	e2 f7       	brpl	.-8      	; 0x89a <pinMode+0x96>
 8a2:	80 95       	com	r24
 8a4:	82 23       	and	r24, r18
 8a6:	8a b9       	out	0x0a, r24	; 10
 8a8:	08 95       	ret
				} else if (type == OUTPUT) {
 8aa:	44 30       	cpi	r20, 0x04	; 4
 8ac:	51 05       	cpc	r21, r1
 8ae:	51 f4       	brne	.+20     	; 0x8c4 <pinMode+0xc0>
				DDRD |= (1 << pin);
 8b0:	2a b1       	in	r18, 0x0a	; 10
 8b2:	81 e0       	ldi	r24, 0x01	; 1
 8b4:	90 e0       	ldi	r25, 0x00	; 0
 8b6:	02 c0       	rjmp	.+4      	; 0x8bc <pinMode+0xb8>
 8b8:	88 0f       	add	r24, r24
 8ba:	99 1f       	adc	r25, r25
 8bc:	6a 95       	dec	r22
 8be:	e2 f7       	brpl	.-8      	; 0x8b8 <pinMode+0xb4>
 8c0:	82 2b       	or	r24, r18
 8c2:	8a b9       	out	0x0a, r24	; 10
 8c4:	08 95       	ret

Disassembly of section .text.digitalRead:

00000b1c <digitalRead>:
			return;
	}
}

int digitalRead(char port, uint8_t pin) {
	switch (port) {
 b1c:	83 34       	cpi	r24, 0x43	; 67
 b1e:	89 f0       	breq	.+34     	; 0xb42 <digitalRead+0x26>
 b20:	84 34       	cpi	r24, 0x44	; 68
 b22:	e1 f0       	breq	.+56     	; 0xb5c <digitalRead+0x40>
 b24:	82 34       	cpi	r24, 0x42	; 66
 b26:	39 f5       	brne	.+78     	; 0xb76 <digitalRead+0x5a>
		case 'B':
			return PINB & (1 << pin);
 b28:	83 b1       	in	r24, 0x03	; 3
 b2a:	28 2f       	mov	r18, r24
 b2c:	30 e0       	ldi	r19, 0x00	; 0
 b2e:	81 e0       	ldi	r24, 0x01	; 1
 b30:	90 e0       	ldi	r25, 0x00	; 0
 b32:	02 c0       	rjmp	.+4      	; 0xb38 <digitalRead+0x1c>
 b34:	88 0f       	add	r24, r24
 b36:	99 1f       	adc	r25, r25
 b38:	6a 95       	dec	r22
 b3a:	e2 f7       	brpl	.-8      	; 0xb34 <digitalRead+0x18>
 b3c:	82 23       	and	r24, r18
 b3e:	93 23       	and	r25, r19
 b40:	08 95       	ret
		case 'C':
			return PINC & (1 << pin);
 b42:	86 b1       	in	r24, 0x06	; 6
 b44:	28 2f       	mov	r18, r24
 b46:	30 e0       	ldi	r19, 0x00	; 0
 b48:	81 e0       	ldi	r24, 0x01	; 1
 b4a:	90 e0       	ldi	r25, 0x00	; 0
 b4c:	02 c0       	rjmp	.+4      	; 0xb52 <digitalRead+0x36>
 b4e:	88 0f       	add	r24, r24
 b50:	99 1f       	adc	r25, r25
 b52:	6a 95       	dec	r22
 b54:	e2 f7       	brpl	.-8      	; 0xb4e <digitalRead+0x32>
 b56:	82 23       	and	r24, r18
 b58:	93 23       	and	r25, r19
 b5a:	08 95       	ret
		case 'D':
			return PIND & (1 << pin);
 b5c:	89 b1       	in	r24, 0x09	; 9
 b5e:	28 2f       	mov	r18, r24
 b60:	30 e0       	ldi	r19, 0x00	; 0
 b62:	81 e0       	ldi	r24, 0x01	; 1
 b64:	90 e0       	ldi	r25, 0x00	; 0
 b66:	02 c0       	rjmp	.+4      	; 0xb6c <digitalRead+0x50>
 b68:	88 0f       	add	r24, r24
 b6a:	99 1f       	adc	r25, r25
 b6c:	6a 95       	dec	r22
 b6e:	e2 f7       	brpl	.-8      	; 0xb68 <digitalRead+0x4c>
 b70:	82 23       	and	r24, r18
 b72:	93 23       	and	r25, r19
 b74:	08 95       	ret
		default:
			return 0;
 b76:	80 e0       	ldi	r24, 0x00	; 0
 b78:	90 e0       	ldi	r25, 0x00	; 0
	}
}
 b7a:	08 95       	ret

Disassembly of section .text.digitalWrite:

0000039e <digitalWrite>:

void digitalWrite(char port, uint8_t pin, int value) {
	switch (port) {
 39e:	83 34       	cpi	r24, 0x43	; 67
 3a0:	81 f1       	breq	.+96     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3a2:	84 34       	cpi	r24, 0x44	; 68
 3a4:	09 f4       	brne	.+2      	; 0x3a8 <digitalWrite+0xa>
 3a6:	57 c0       	rjmp	.+174    	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 3a8:	82 34       	cpi	r24, 0x42	; 66
 3aa:	09 f0       	breq	.+2      	; 0x3ae <digitalWrite+0x10>
 3ac:	7b c0       	rjmp	.+246    	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
		case 'B':
			if (value == HIGH) {
 3ae:	41 30       	cpi	r20, 0x01	; 1
 3b0:	51 05       	cpc	r21, r1
 3b2:	61 f4       	brne	.+24     	; 0x3cc <digitalWrite+0x2e>
				PORTB |= (1 << pin);
 3b4:	25 b1       	in	r18, 0x05	; 5
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	06 2e       	mov	r0, r22
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <digitalWrite+0x24>
 3be:	88 0f       	add	r24, r24
 3c0:	99 1f       	adc	r25, r25
 3c2:	0a 94       	dec	r0
 3c4:	e2 f7       	brpl	.-8      	; 0x3be <digitalWrite+0x20>
 3c6:	82 2b       	or	r24, r18
 3c8:	85 b9       	out	0x05, r24	; 5
 3ca:	1b c0       	rjmp	.+54     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
				} else if (value == TOGGLE) {
 3cc:	42 30       	cpi	r20, 0x02	; 2
 3ce:	51 05       	cpc	r21, r1
 3d0:	61 f4       	brne	.+24     	; 0x3ea <digitalWrite+0x4c>
				PORTB ^= (1 << pin);
 3d2:	25 b1       	in	r18, 0x05	; 5
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	06 2e       	mov	r0, r22
 3da:	02 c0       	rjmp	.+4      	; 0x3e0 <digitalWrite+0x42>
 3dc:	88 0f       	add	r24, r24
 3de:	99 1f       	adc	r25, r25
 3e0:	0a 94       	dec	r0
 3e2:	e2 f7       	brpl	.-8      	; 0x3dc <digitalWrite+0x3e>
 3e4:	82 27       	eor	r24, r18
 3e6:	85 b9       	out	0x05, r24	; 5
 3e8:	0c c0       	rjmp	.+24     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
				} else {
				PORTB &= ~(1 << pin);
 3ea:	25 b1       	in	r18, 0x05	; 5
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	06 2e       	mov	r0, r22
 3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <digitalWrite+0x5a>
 3f4:	88 0f       	add	r24, r24
 3f6:	99 1f       	adc	r25, r25
 3f8:	0a 94       	dec	r0
 3fa:	e2 f7       	brpl	.-8      	; 0x3f4 <digitalWrite+0x56>
 3fc:	80 95       	com	r24
 3fe:	82 23       	and	r24, r18
 400:	85 b9       	out	0x05, r24	; 5
			}
		case 'C':
			if (value == HIGH) {
 402:	41 30       	cpi	r20, 0x01	; 1
 404:	51 05       	cpc	r21, r1
 406:	61 f4       	brne	.+24     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
				PORTC |= (1 << pin);
 408:	28 b1       	in	r18, 0x08	; 8
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	06 2e       	mov	r0, r22
 410:	02 c0       	rjmp	.+4      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 412:	88 0f       	add	r24, r24
 414:	99 1f       	adc	r25, r25
 416:	0a 94       	dec	r0
 418:	e2 f7       	brpl	.-8      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 41a:	82 2b       	or	r24, r18
 41c:	88 b9       	out	0x08, r24	; 8
 41e:	1b c0       	rjmp	.+54     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
				} else if (value == TOGGLE) {
 420:	42 30       	cpi	r20, 0x02	; 2
 422:	51 05       	cpc	r21, r1
 424:	61 f4       	brne	.+24     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
				PORTC ^= (1 << pin);
 426:	28 b1       	in	r18, 0x08	; 8
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	06 2e       	mov	r0, r22
 42e:	02 c0       	rjmp	.+4      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 430:	88 0f       	add	r24, r24
 432:	99 1f       	adc	r25, r25
 434:	0a 94       	dec	r0
 436:	e2 f7       	brpl	.-8      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 438:	82 27       	eor	r24, r18
 43a:	88 b9       	out	0x08, r24	; 8
 43c:	0c c0       	rjmp	.+24     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
				} else {
				PORTC &= ~(1 << pin);
 43e:	28 b1       	in	r18, 0x08	; 8
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	06 2e       	mov	r0, r22
 446:	02 c0       	rjmp	.+4      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 448:	88 0f       	add	r24, r24
 44a:	99 1f       	adc	r25, r25
 44c:	0a 94       	dec	r0
 44e:	e2 f7       	brpl	.-8      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 450:	80 95       	com	r24
 452:	82 23       	and	r24, r18
 454:	88 b9       	out	0x08, r24	; 8
			}
		case 'D':
			if (value == HIGH) {
 456:	41 30       	cpi	r20, 0x01	; 1
 458:	51 05       	cpc	r21, r1
 45a:	59 f4       	brne	.+22     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
				PORTD |= (1 << pin);
 45c:	2b b1       	in	r18, 0x0b	; 11
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	02 c0       	rjmp	.+4      	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 464:	88 0f       	add	r24, r24
 466:	99 1f       	adc	r25, r25
 468:	6a 95       	dec	r22
 46a:	e2 f7       	brpl	.-8      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 46c:	82 2b       	or	r24, r18
 46e:	8b b9       	out	0x0b, r24	; 11
 470:	08 95       	ret
				} else if (value == TOGGLE) {
 472:	42 30       	cpi	r20, 0x02	; 2
 474:	51 05       	cpc	r21, r1
 476:	59 f4       	brne	.+22     	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
				PORTD ^= (1 << pin);
 478:	2b b1       	in	r18, 0x0b	; 11
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	02 c0       	rjmp	.+4      	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 480:	88 0f       	add	r24, r24
 482:	99 1f       	adc	r25, r25
 484:	6a 95       	dec	r22
 486:	e2 f7       	brpl	.-8      	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 488:	82 27       	eor	r24, r18
 48a:	8b b9       	out	0x0b, r24	; 11
 48c:	08 95       	ret
				} else {
				PORTD &= ~(1 << pin);
 48e:	2b b1       	in	r18, 0x0b	; 11
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	02 c0       	rjmp	.+4      	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
 496:	88 0f       	add	r24, r24
 498:	99 1f       	adc	r25, r25
 49a:	6a 95       	dec	r22
 49c:	e2 f7       	brpl	.-8      	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
 49e:	80 95       	com	r24
 4a0:	82 23       	and	r24, r18
 4a2:	8b b9       	out	0x0b, r24	; 11
 4a4:	08 95       	ret

Disassembly of section .text.__vector_1:

00000aa6 <__vector_1>:
	getTargetCurrent();	
	updateMotorPID();
	updateResistorPID();
}

ISR (INT0_vect) {
 aa6:	1f 92       	push	r1
 aa8:	0f 92       	push	r0
 aaa:	0f b6       	in	r0, 0x3f	; 63
 aac:	0f 92       	push	r0
 aae:	11 24       	eor	r1, r1
 ab0:	2f 93       	push	r18
 ab2:	3f 93       	push	r19
 ab4:	4f 93       	push	r20
 ab6:	5f 93       	push	r21
 ab8:	6f 93       	push	r22
 aba:	7f 93       	push	r23
 abc:	8f 93       	push	r24
 abe:	9f 93       	push	r25
 ac0:	af 93       	push	r26
 ac2:	bf 93       	push	r27
 ac4:	ef 93       	push	r30
 ac6:	ff 93       	push	r31
	if (digitalRead(MOTOR_ENC_A)) {
 ac8:	63 e0       	ldi	r22, 0x03	; 3
 aca:	84 e4       	ldi	r24, 0x44	; 68
 acc:	0e 94 8e 05 	call	0xb1c	; 0xb1c <digitalRead>
 ad0:	89 2b       	or	r24, r25
 ad2:	51 f0       	breq	.+20     	; 0xae8 <__vector_1+0x42>
		iEncoderPos += 1;
 ad4:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <iEncoderPos>
 ad8:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <iEncoderPos+0x1>
 adc:	01 96       	adiw	r24, 0x01	; 1
 ade:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <iEncoderPos+0x1>
 ae2:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <iEncoderPos>
 ae6:	09 c0       	rjmp	.+18     	; 0xafa <__vector_1+0x54>
	} else {
		iEncoderPos -= 1;
 ae8:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <iEncoderPos>
 aec:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <iEncoderPos+0x1>
 af0:	01 97       	sbiw	r24, 0x01	; 1
 af2:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <iEncoderPos+0x1>
 af6:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <iEncoderPos>
	}
}
 afa:	ff 91       	pop	r31
 afc:	ef 91       	pop	r30
 afe:	bf 91       	pop	r27
 b00:	af 91       	pop	r26
 b02:	9f 91       	pop	r25
 b04:	8f 91       	pop	r24
 b06:	7f 91       	pop	r23
 b08:	6f 91       	pop	r22
 b0a:	5f 91       	pop	r21
 b0c:	4f 91       	pop	r20
 b0e:	3f 91       	pop	r19
 b10:	2f 91       	pop	r18
 b12:	0f 90       	pop	r0
 b14:	0f be       	out	0x3f, r0	; 63
 b16:	0f 90       	pop	r0
 b18:	1f 90       	pop	r1
 b1a:	18 95       	reti

Disassembly of section .text.setPinModes:

000004a6 <setPinModes>:
		- Watchdog timer restarts cycle
	*/
}

void setPinModes() {
	pinMode(RESISTOR_FWD, OUTPUT);
 4a6:	44 e0       	ldi	r20, 0x04	; 4
 4a8:	50 e0       	ldi	r21, 0x00	; 0
 4aa:	61 e0       	ldi	r22, 0x01	; 1
 4ac:	84 e4       	ldi	r24, 0x44	; 68
 4ae:	0e 94 02 04 	call	0x804	; 0x804 <pinMode>
	pinMode(RESISTOR_REV, OUTPUT);
 4b2:	44 e0       	ldi	r20, 0x04	; 4
 4b4:	50 e0       	ldi	r21, 0x00	; 0
 4b6:	60 e0       	ldi	r22, 0x00	; 0
 4b8:	84 e4       	ldi	r24, 0x44	; 68
 4ba:	0e 94 02 04 	call	0x804	; 0x804 <pinMode>
	pinMode(RESISTOR_PWM, OUTPUT);
 4be:	44 e0       	ldi	r20, 0x04	; 4
 4c0:	50 e0       	ldi	r21, 0x00	; 0
 4c2:	61 e0       	ldi	r22, 0x01	; 1
 4c4:	82 e4       	ldi	r24, 0x42	; 66
 4c6:	0e 94 02 04 	call	0x804	; 0x804 <pinMode>

	pinMode(MOTOR_FWD, OUTPUT);
 4ca:	44 e0       	ldi	r20, 0x04	; 4
 4cc:	50 e0       	ldi	r21, 0x00	; 0
 4ce:	60 e0       	ldi	r22, 0x00	; 0
 4d0:	82 e4       	ldi	r24, 0x42	; 66
 4d2:	0e 94 02 04 	call	0x804	; 0x804 <pinMode>
	pinMode(MOTOR_REV, OUTPUT);
 4d6:	44 e0       	ldi	r20, 0x04	; 4
 4d8:	50 e0       	ldi	r21, 0x00	; 0
 4da:	64 e0       	ldi	r22, 0x04	; 4
 4dc:	84 e4       	ldi	r24, 0x44	; 68
 4de:	0e 94 02 04 	call	0x804	; 0x804 <pinMode>
	pinMode(MOTOR_PWM, OUTPUT);
 4e2:	44 e0       	ldi	r20, 0x04	; 4
 4e4:	50 e0       	ldi	r21, 0x00	; 0
 4e6:	62 e0       	ldi	r22, 0x02	; 2
 4e8:	82 e4       	ldi	r24, 0x42	; 66
 4ea:	0e 94 02 04 	call	0x804	; 0x804 <pinMode>

	pinMode(BATT_V_REF, INPUT);
 4ee:	43 e0       	ldi	r20, 0x03	; 3
 4f0:	50 e0       	ldi	r21, 0x00	; 0
 4f2:	64 e0       	ldi	r22, 0x04	; 4
 4f4:	83 e4       	ldi	r24, 0x43	; 67
 4f6:	0e 94 02 04 	call	0x804	; 0x804 <pinMode>
	pinMode(BATT_TEMP, INPUT);
 4fa:	43 e0       	ldi	r20, 0x03	; 3
 4fc:	50 e0       	ldi	r21, 0x00	; 0
 4fe:	62 e0       	ldi	r22, 0x02	; 2
 500:	83 e4       	ldi	r24, 0x43	; 67
 502:	0e 94 02 04 	call	0x804	; 0x804 <pinMode>
	pinMode(MOT_I_REF, INPUT);
 506:	43 e0       	ldi	r20, 0x03	; 3
 508:	50 e0       	ldi	r21, 0x00	; 0
 50a:	63 e0       	ldi	r22, 0x03	; 3
 50c:	83 e4       	ldi	r24, 0x43	; 67
 50e:	0e 94 02 04 	call	0x804	; 0x804 <pinMode>

	pinMode(POT_FRICTION, INPUT);
 512:	43 e0       	ldi	r20, 0x03	; 3
 514:	50 e0       	ldi	r21, 0x00	; 0
 516:	61 e0       	ldi	r22, 0x01	; 1
 518:	83 e4       	ldi	r24, 0x43	; 67
 51a:	0e 94 02 04 	call	0x804	; 0x804 <pinMode>
	pinMode(POT_SLOPE, INPUT);
 51e:	43 e0       	ldi	r20, 0x03	; 3
 520:	50 e0       	ldi	r21, 0x00	; 0
 522:	60 e0       	ldi	r22, 0x00	; 0
 524:	83 e4       	ldi	r24, 0x43	; 67
 526:	0e 94 02 04 	call	0x804	; 0x804 <pinMode>
	pinMode(POT_MOMENTUM, INPUT);
 52a:	43 e0       	ldi	r20, 0x03	; 3
 52c:	50 e0       	ldi	r21, 0x00	; 0
 52e:	67 e0       	ldi	r22, 0x07	; 7
 530:	83 e4       	ldi	r24, 0x43	; 67
 532:	0e 94 02 04 	call	0x804	; 0x804 <pinMode>

	pinMode(SW_AUTO_MAN, INPUT);
 536:	43 e0       	ldi	r20, 0x03	; 3
 538:	50 e0       	ldi	r21, 0x00	; 0
 53a:	67 e0       	ldi	r22, 0x07	; 7
 53c:	84 e4       	ldi	r24, 0x44	; 68
 53e:	0e 94 02 04 	call	0x804	; 0x804 <pinMode>

	pinMode(EXT_STATUS_LT, OUTPUT);
 542:	44 e0       	ldi	r20, 0x04	; 4
 544:	50 e0       	ldi	r21, 0x00	; 0
 546:	65 e0       	ldi	r22, 0x05	; 5
 548:	84 e4       	ldi	r24, 0x44	; 68
 54a:	0e 94 02 04 	call	0x804	; 0x804 <pinMode>
	pinMode(EXT_ERROR_LT, OUTPUT);
 54e:	44 e0       	ldi	r20, 0x04	; 4
 550:	50 e0       	ldi	r21, 0x00	; 0
 552:	66 e0       	ldi	r22, 0x06	; 6
 554:	84 e4       	ldi	r24, 0x44	; 68
 556:	0e 94 02 04 	call	0x804	; 0x804 <pinMode>
	
	pinMode(MOTOR_ENC_A, INPUT);
 55a:	43 e0       	ldi	r20, 0x03	; 3
 55c:	50 e0       	ldi	r21, 0x00	; 0
 55e:	63 e0       	ldi	r22, 0x03	; 3
 560:	84 e4       	ldi	r24, 0x44	; 68
 562:	0e 94 02 04 	call	0x804	; 0x804 <pinMode>
	pinMode(MOTOR_ENC_B, INPUT);	
 566:	43 e0       	ldi	r20, 0x03	; 3
 568:	50 e0       	ldi	r21, 0x00	; 0
 56a:	62 e0       	ldi	r22, 0x02	; 2
 56c:	84 e4       	ldi	r24, 0x44	; 68
 56e:	0e 94 02 04 	call	0x804	; 0x804 <pinMode>
	EICRA = EICRA & 0b11111100 | 0b00000011; // Rising edge triggers an interrupt for INT0
 572:	e9 e6       	ldi	r30, 0x69	; 105
 574:	f0 e0       	ldi	r31, 0x00	; 0
 576:	80 81       	ld	r24, Z
 578:	83 60       	ori	r24, 0x03	; 3
 57a:	80 83       	st	Z, r24
	EIMSK = EIMSK & 0b11111110 | 0b00000001; // Enable INT0 interrupt
 57c:	8d b3       	in	r24, 0x1d	; 29
 57e:	81 60       	ori	r24, 0x01	; 1
 580:	8d bb       	out	0x1d, r24	; 29
 582:	08 95       	ret

Disassembly of section .text.setPwmTimers:

00000d5c <setPwmTimers>:
}

void setPwmTimers(){
	// TCCR1A - Timer/Counter1 Control Registers
	TCCR1A = TCCR1A & 0b00001100 | 0b10100001; // Clear OC1A/OC1B on compare match, Fast PWM, 8-bit
 d5c:	e0 e8       	ldi	r30, 0x80	; 128
 d5e:	f0 e0       	ldi	r31, 0x00	; 0
 d60:	80 81       	ld	r24, Z
 d62:	8c 70       	andi	r24, 0x0C	; 12
 d64:	81 6a       	ori	r24, 0xA1	; 161
 d66:	80 83       	st	Z, r24
	TCCR1B = TCCR1B & 0b11100000 | 0b00001010; // Fast PWM, 8-bit, no prescaling (31.3 kHz base)
 d68:	e1 e8       	ldi	r30, 0x81	; 129
 d6a:	f0 e0       	ldi	r31, 0x00	; 0
 d6c:	80 81       	ld	r24, Z
 d6e:	80 7e       	andi	r24, 0xE0	; 224
 d70:	8a 60       	ori	r24, 0x0A	; 10
 d72:	80 83       	st	Z, r24
 d74:	08 95       	ret

Disassembly of section .text.setAnalogInputs:

00000cc0 <setAnalogInputs>:
}

void setAnalogInputs(){
	// Analog read setup
	DIDR0 |= 0b00111111;
 cc0:	ee e7       	ldi	r30, 0x7E	; 126
 cc2:	f0 e0       	ldi	r31, 0x00	; 0
 cc4:	80 81       	ld	r24, Z
 cc6:	8f 63       	ori	r24, 0x3F	; 63
 cc8:	80 83       	st	Z, r24
	ADMUX = ADMUX & 0b00011111 | 0b01100000;	// Voltage reference from AVcc with capacitor at AREF. Left adjust ADCL and ADCH. Read only ADCH for 8-bit value.
 cca:	ec e7       	ldi	r30, 0x7C	; 124
 ccc:	f0 e0       	ldi	r31, 0x00	; 0
 cce:	80 81       	ld	r24, Z
 cd0:	8f 71       	andi	r24, 0x1F	; 31
 cd2:	80 66       	ori	r24, 0x60	; 96
 cd4:	80 83       	st	Z, r24
	ADCSRA = ADCSRA & 0b00111000 | 0b10000100;	// Enable ADC converter and set prescaler to 16
 cd6:	ea e7       	ldi	r30, 0x7A	; 122
 cd8:	f0 e0       	ldi	r31, 0x00	; 0
 cda:	80 81       	ld	r24, Z
 cdc:	88 73       	andi	r24, 0x38	; 56
 cde:	84 68       	ori	r24, 0x84	; 132
 ce0:	80 83       	st	Z, r24
	ADCSRB = ADCSRB & 0b11111000 | 0b00000100;
 ce2:	eb e7       	ldi	r30, 0x7B	; 123
 ce4:	f0 e0       	ldi	r31, 0x00	; 0
 ce6:	80 81       	ld	r24, Z
 ce8:	88 7f       	andi	r24, 0xF8	; 248
 cea:	84 60       	ori	r24, 0x04	; 4
 cec:	80 83       	st	Z, r24
 cee:	08 95       	ret

Disassembly of section .text.setSampleTimer:

00000d16 <setSampleTimer>:
}

void setSampleTimer(){
	TCCR2A = TCCR2A & 0b00001100 | 0b00000011;	// Fast PWM, no output
 d16:	e0 eb       	ldi	r30, 0xB0	; 176
 d18:	f0 e0       	ldi	r31, 0x00	; 0
 d1a:	80 81       	ld	r24, Z
 d1c:	8c 70       	andi	r24, 0x0C	; 12
 d1e:	83 60       	ori	r24, 0x03	; 3
 d20:	80 83       	st	Z, r24
	TCCR2B = TCCR2A & 0b11110000 | 0b00000111;	// Fast PWM, clk/1024
 d22:	80 81       	ld	r24, Z
 d24:	80 7f       	andi	r24, 0xF0	; 240
 d26:	87 60       	ori	r24, 0x07	; 7
 d28:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	TCNT2 = 99;	// 100 Hz sampling
 d2c:	83 e6       	ldi	r24, 0x63	; 99
 d2e:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
	TIMSK2 = (1 << TOIE2);
 d32:	81 e0       	ldi	r24, 0x01	; 1
 d34:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
 d38:	08 95       	ret

Disassembly of section .text.sampleInputs:

000000d4 <sampleInputs>:
}

void sampleInputs(){
  d4:	ef 92       	push	r14
  d6:	ff 92       	push	r15
  d8:	0f 93       	push	r16
  da:	1f 93       	push	r17
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
	arrMotorData[motorDataPointer].motorInstVelocity = iEncoderPos / 0.01;
  e0:	00 91 03 01 	lds	r16, 0x0103	; 0x800103 <motorDataPointer>
  e4:	e0 2e       	mov	r14, r16
  e6:	f1 2c       	mov	r15, r1
  e8:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <iEncoderPos>
  ec:	70 91 06 01 	lds	r23, 0x0106	; 0x800106 <iEncoderPos+0x1>
  f0:	07 2e       	mov	r0, r23
  f2:	00 0c       	add	r0, r0
  f4:	88 0b       	sbc	r24, r24
  f6:	99 0b       	sbc	r25, r25
  f8:	0e 94 18 05 	call	0xa30	; 0xa30 <__floatsisf>
  fc:	2a e0       	ldi	r18, 0x0A	; 10
  fe:	37 ed       	ldi	r19, 0xD7	; 215
 100:	43 e2       	ldi	r20, 0x23	; 35
 102:	5c e3       	ldi	r21, 0x3C	; 60
 104:	0e 94 f6 06 	call	0xdec	; 0xdec <__divsf3>
 108:	f7 01       	movw	r30, r14
 10a:	ee 0f       	add	r30, r30
 10c:	ff 1f       	adc	r31, r31
 10e:	ee 0d       	add	r30, r14
 110:	ff 1d       	adc	r31, r15
 112:	ee 0f       	add	r30, r30
 114:	ff 1f       	adc	r31, r31
 116:	ee 0f       	add	r30, r30
 118:	ff 1f       	adc	r31, r31
 11a:	e5 5f       	subi	r30, 0xF5	; 245
 11c:	fe 4f       	sbci	r31, 0xFE	; 254
 11e:	60 83       	st	Z, r22
 120:	71 83       	std	Z+1, r23	; 0x01
 122:	82 83       	std	Z+2, r24	; 0x02
 124:	93 83       	std	Z+3, r25	; 0x03
	iEncoderPos = 0;
 126:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <iEncoderPos+0x1>
 12a:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <iEncoderPos>
	
	arrMotorData[motorDataPointer].motorVelocity = 0;
 12e:	14 82       	std	Z+4, r1	; 0x04
 130:	15 82       	std	Z+5, r1	; 0x05
 132:	16 82       	std	Z+6, r1	; 0x06
 134:	17 82       	std	Z+7, r1	; 0x07
	for (uint8_t i = 0; i < MOTOR_DATA_LENGTH; i++) {
 136:	10 e0       	ldi	r17, 0x00	; 0
 138:	1a c0       	rjmp	.+52     	; 0x16e <sampleInputs+0x9a>
		arrMotorData[motorDataPointer].motorVelocity += arrMotorData[motorDataPointer].motorInstVelocity;
 13a:	e7 01       	movw	r28, r14
 13c:	cc 0f       	add	r28, r28
 13e:	dd 1f       	adc	r29, r29
 140:	ce 0d       	add	r28, r14
 142:	df 1d       	adc	r29, r15
 144:	cc 0f       	add	r28, r28
 146:	dd 1f       	adc	r29, r29
 148:	cc 0f       	add	r28, r28
 14a:	dd 1f       	adc	r29, r29
 14c:	c5 5f       	subi	r28, 0xF5	; 245
 14e:	de 4f       	sbci	r29, 0xFE	; 254
 150:	28 81       	ld	r18, Y
 152:	39 81       	ldd	r19, Y+1	; 0x01
 154:	4a 81       	ldd	r20, Y+2	; 0x02
 156:	5b 81       	ldd	r21, Y+3	; 0x03
 158:	6c 81       	ldd	r22, Y+4	; 0x04
 15a:	7d 81       	ldd	r23, Y+5	; 0x05
 15c:	8e 81       	ldd	r24, Y+6	; 0x06
 15e:	9f 81       	ldd	r25, Y+7	; 0x07
 160:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__addsf3>
 164:	6c 83       	std	Y+4, r22	; 0x04
 166:	7d 83       	std	Y+5, r23	; 0x05
 168:	8e 83       	std	Y+6, r24	; 0x06
 16a:	9f 83       	std	Y+7, r25	; 0x07
void sampleInputs(){
	arrMotorData[motorDataPointer].motorInstVelocity = iEncoderPos / 0.01;
	iEncoderPos = 0;
	
	arrMotorData[motorDataPointer].motorVelocity = 0;
	for (uint8_t i = 0; i < MOTOR_DATA_LENGTH; i++) {
 16c:	1f 5f       	subi	r17, 0xFF	; 255
 16e:	19 31       	cpi	r17, 0x19	; 25
 170:	20 f3       	brcs	.-56     	; 0x13a <sampleInputs+0x66>
		arrMotorData[motorDataPointer].motorVelocity += arrMotorData[motorDataPointer].motorInstVelocity;
	}
	arrMotorData[motorDataPointer].motorVelocity /= MOTOR_DATA_LENGTH;
 172:	e7 01       	movw	r28, r14
 174:	cc 0f       	add	r28, r28
 176:	dd 1f       	adc	r29, r29
 178:	ce 0d       	add	r28, r14
 17a:	df 1d       	adc	r29, r15
 17c:	cc 0f       	add	r28, r28
 17e:	dd 1f       	adc	r29, r29
 180:	cc 0f       	add	r28, r28
 182:	dd 1f       	adc	r29, r29
 184:	c5 5f       	subi	r28, 0xF5	; 245
 186:	de 4f       	sbci	r29, 0xFE	; 254
 188:	20 e0       	ldi	r18, 0x00	; 0
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	48 ec       	ldi	r20, 0xC8	; 200
 18e:	51 e4       	ldi	r21, 0x41	; 65
 190:	6c 81       	ldd	r22, Y+4	; 0x04
 192:	7d 81       	ldd	r23, Y+5	; 0x05
 194:	8e 81       	ldd	r24, Y+6	; 0x06
 196:	9f 81       	ldd	r25, Y+7	; 0x07
 198:	0e 94 f6 06 	call	0xdec	; 0xdec <__divsf3>
 19c:	6c 83       	std	Y+4, r22	; 0x04
 19e:	7d 83       	std	Y+5, r23	; 0x05
 1a0:	8e 83       	std	Y+6, r24	; 0x06
 1a2:	9f 83       	std	Y+7, r25	; 0x07
	
	if (motorDataPointer < (MOTOR_DATA_LENGTH - 1)) {
 1a4:	08 31       	cpi	r16, 0x18	; 24
 1a6:	f8 f4       	brcc	.+62     	; 0x1e6 <sampleInputs+0x112>
		arrMotorData[motorDataPointer].motorAcceleration =
				(arrMotorData[motorDataPointer].motorVelocity - arrMotorData[motorDataPointer + 1].motorVelocity)
 1a8:	97 01       	movw	r18, r14
 1aa:	2f 5f       	subi	r18, 0xFF	; 255
 1ac:	3f 4f       	sbci	r19, 0xFF	; 255
 1ae:	f9 01       	movw	r30, r18
 1b0:	ee 0f       	add	r30, r30
 1b2:	ff 1f       	adc	r31, r31
 1b4:	e2 0f       	add	r30, r18
 1b6:	f3 1f       	adc	r31, r19
 1b8:	ee 0f       	add	r30, r30
 1ba:	ff 1f       	adc	r31, r31
 1bc:	ee 0f       	add	r30, r30
 1be:	ff 1f       	adc	r31, r31
 1c0:	e5 5f       	subi	r30, 0xF5	; 245
 1c2:	fe 4f       	sbci	r31, 0xFE	; 254
 1c4:	24 81       	ldd	r18, Z+4	; 0x04
 1c6:	35 81       	ldd	r19, Z+5	; 0x05
 1c8:	46 81       	ldd	r20, Z+6	; 0x06
 1ca:	57 81       	ldd	r21, Z+7	; 0x07
 1cc:	0e 94 c4 06 	call	0xd88	; 0xd88 <__subsf3>
				/ MOTOR_DATA_LENGTH;				
 1d0:	20 e0       	ldi	r18, 0x00	; 0
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	48 ec       	ldi	r20, 0xC8	; 200
 1d6:	51 e4       	ldi	r21, 0x41	; 65
 1d8:	0e 94 f6 06 	call	0xdec	; 0xdec <__divsf3>
		arrMotorData[motorDataPointer].motorVelocity += arrMotorData[motorDataPointer].motorInstVelocity;
	}
	arrMotorData[motorDataPointer].motorVelocity /= MOTOR_DATA_LENGTH;
	
	if (motorDataPointer < (MOTOR_DATA_LENGTH - 1)) {
		arrMotorData[motorDataPointer].motorAcceleration =
 1dc:	68 87       	std	Y+8, r22	; 0x08
 1de:	79 87       	std	Y+9, r23	; 0x09
 1e0:	8a 87       	std	Y+10, r24	; 0x0a
 1e2:	9b 87       	std	Y+11, r25	; 0x0b
 1e4:	1f c0       	rjmp	.+62     	; 0x224 <sampleInputs+0x150>
				(arrMotorData[motorDataPointer].motorVelocity - arrMotorData[motorDataPointer + 1].motorVelocity)
				/ MOTOR_DATA_LENGTH;				
	} else {
		arrMotorData[motorDataPointer].motorAcceleration =
				(arrMotorData[motorDataPointer].motorVelocity - arrMotorData[0].motorVelocity)
 1e6:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <arrMotorData+0x4>
 1ea:	30 91 10 01 	lds	r19, 0x0110	; 0x800110 <arrMotorData+0x5>
 1ee:	40 91 11 01 	lds	r20, 0x0111	; 0x800111 <arrMotorData+0x6>
 1f2:	50 91 12 01 	lds	r21, 0x0112	; 0x800112 <arrMotorData+0x7>
 1f6:	0e 94 c4 06 	call	0xd88	; 0xd88 <__subsf3>
				/ MOTOR_DATA_LENGTH;		
 1fa:	20 e0       	ldi	r18, 0x00	; 0
 1fc:	30 e0       	ldi	r19, 0x00	; 0
 1fe:	48 ec       	ldi	r20, 0xC8	; 200
 200:	51 e4       	ldi	r21, 0x41	; 65
 202:	0e 94 f6 06 	call	0xdec	; 0xdec <__divsf3>
	if (motorDataPointer < (MOTOR_DATA_LENGTH - 1)) {
		arrMotorData[motorDataPointer].motorAcceleration =
				(arrMotorData[motorDataPointer].motorVelocity - arrMotorData[motorDataPointer + 1].motorVelocity)
				/ MOTOR_DATA_LENGTH;				
	} else {
		arrMotorData[motorDataPointer].motorAcceleration =
 206:	f7 01       	movw	r30, r14
 208:	ee 0f       	add	r30, r30
 20a:	ff 1f       	adc	r31, r31
 20c:	ee 0d       	add	r30, r14
 20e:	ff 1d       	adc	r31, r15
 210:	ee 0f       	add	r30, r30
 212:	ff 1f       	adc	r31, r31
 214:	ee 0f       	add	r30, r30
 216:	ff 1f       	adc	r31, r31
 218:	e5 5f       	subi	r30, 0xF5	; 245
 21a:	fe 4f       	sbci	r31, 0xFE	; 254
 21c:	60 87       	std	Z+8, r22	; 0x08
 21e:	71 87       	std	Z+9, r23	; 0x09
 220:	82 87       	std	Z+10, r24	; 0x0a
 222:	93 87       	std	Z+11, r25	; 0x0b
				(arrMotorData[motorDataPointer].motorVelocity - arrMotorData[0].motorVelocity)
				/ MOTOR_DATA_LENGTH;		
	}
	
	if (!dataBufferFull) {
 224:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <dataBufferFull>
 228:	81 11       	cpse	r24, r1
 22a:	17 c0       	rjmp	.+46     	; 0x25a <sampleInputs+0x186>
		arrMotorData[motorDataPointer].motorVelocity = 0;
 22c:	f7 01       	movw	r30, r14
 22e:	ee 0f       	add	r30, r30
 230:	ff 1f       	adc	r31, r31
 232:	df 01       	movw	r26, r30
 234:	ae 0d       	add	r26, r14
 236:	bf 1d       	adc	r27, r15
 238:	aa 0f       	add	r26, r26
 23a:	bb 1f       	adc	r27, r27
 23c:	aa 0f       	add	r26, r26
 23e:	bb 1f       	adc	r27, r27
 240:	a5 5f       	subi	r26, 0xF5	; 245
 242:	be 4f       	sbci	r27, 0xFE	; 254
 244:	14 96       	adiw	r26, 0x04	; 4
 246:	1d 92       	st	X+, r1
 248:	1d 92       	st	X+, r1
 24a:	1d 92       	st	X+, r1
 24c:	1c 92       	st	X, r1
 24e:	17 97       	sbiw	r26, 0x07	; 7
		arrMotorData[motorDataPointer].motorAcceleration = 0;
 250:	fd 01       	movw	r30, r26
 252:	10 86       	std	Z+8, r1	; 0x08
 254:	11 86       	std	Z+9, r1	; 0x09
 256:	12 86       	std	Z+10, r1	; 0x0a
 258:	13 86       	std	Z+11, r1	; 0x0b
	}
	
	motorDataPointer += 1;
 25a:	0f 5f       	subi	r16, 0xFF	; 255
 25c:	00 93 03 01 	sts	0x0103, r16	; 0x800103 <motorDataPointer>
	if (motorDataPointer >= MOTOR_DATA_LENGTH) {
 260:	09 31       	cpi	r16, 0x19	; 25
 262:	28 f0       	brcs	.+10     	; 0x26e <sampleInputs+0x19a>
		dataBufferFull = true;
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <dataBufferFull>
		motorDataPointer = 0;
 26a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <motorDataPointer>
	}
}
 26e:	df 91       	pop	r29
 270:	cf 91       	pop	r28
 272:	1f 91       	pop	r17
 274:	0f 91       	pop	r16
 276:	ff 90       	pop	r15
 278:	ef 90       	pop	r14
 27a:	08 95       	ret

Disassembly of section .text.getTargetCurrent:

000008c6 <getTargetCurrent>:

void getTargetCurrent(){
 8c6:	cf 92       	push	r12
 8c8:	df 92       	push	r13
 8ca:	ef 92       	push	r14
 8cc:	ff 92       	push	r15
	// Friction (responds to square of velocity)
	/*targetCurrent -= arrMotorData[motorDataPointer].motorVelocity 
			* arrMotorData[motorDataPointer].motorVelocity * potFriction_steps / 1280*/
	
	// Slope (fixed torque)
	targetCurrent += (potSlope_steps - 128) / 4;
 8ce:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <potSlope_steps>
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	80 58       	subi	r24, 0x80	; 128
 8d6:	91 09       	sbc	r25, r1
 8d8:	bc 01       	movw	r22, r24
 8da:	12 f4       	brpl	.+4      	; 0x8e0 <getTargetCurrent+0x1a>
 8dc:	6d 5f       	subi	r22, 0xFD	; 253
 8de:	7f 4f       	sbci	r23, 0xFF	; 255
 8e0:	75 95       	asr	r23
 8e2:	67 95       	ror	r22
 8e4:	75 95       	asr	r23
 8e6:	67 95       	ror	r22
 8e8:	07 2e       	mov	r0, r23
 8ea:	00 0c       	add	r0, r0
 8ec:	88 0b       	sbc	r24, r24
 8ee:	99 0b       	sbc	r25, r25
 8f0:	0e 94 18 05 	call	0xa30	; 0xa30 <__floatsisf>
 8f4:	20 e0       	ldi	r18, 0x00	; 0
 8f6:	30 e0       	ldi	r19, 0x00	; 0
 8f8:	40 e0       	ldi	r20, 0x00	; 0
 8fa:	53 e4       	ldi	r21, 0x43	; 67
 8fc:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__addsf3>
 900:	6b 01       	movw	r12, r22
 902:	7c 01       	movw	r14, r24
	
	// Momentum (responds to change in velocity)
	//targetCurrent -= arrMotorData[motorDataPointer].motorAcceleration * potMomentum_steps / 255;
	
	// Check boundaries
	if (targetCurrent < 0 || arrMotorData[motorDataPointer].motorVelocity == 0) { // don't apply torque if rollers are stationary
 904:	20 e0       	ldi	r18, 0x00	; 0
 906:	30 e0       	ldi	r19, 0x00	; 0
 908:	a9 01       	movw	r20, r18
 90a:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__cmpsf2>
 90e:	88 23       	and	r24, r24
 910:	cc f0       	brlt	.+50     	; 0x944 <__stack+0x45>
 912:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <motorDataPointer>
 916:	90 e0       	ldi	r25, 0x00	; 0
 918:	fc 01       	movw	r30, r24
 91a:	ee 0f       	add	r30, r30
 91c:	ff 1f       	adc	r31, r31
 91e:	e8 0f       	add	r30, r24
 920:	f9 1f       	adc	r31, r25
 922:	ee 0f       	add	r30, r30
 924:	ff 1f       	adc	r31, r31
 926:	ee 0f       	add	r30, r30
 928:	ff 1f       	adc	r31, r31
 92a:	e5 5f       	subi	r30, 0xF5	; 245
 92c:	fe 4f       	sbci	r31, 0xFE	; 254
 92e:	64 81       	ldd	r22, Z+4	; 0x04
 930:	75 81       	ldd	r23, Z+5	; 0x05
 932:	86 81       	ldd	r24, Z+6	; 0x06
 934:	97 81       	ldd	r25, Z+7	; 0x07
 936:	20 e0       	ldi	r18, 0x00	; 0
 938:	30 e0       	ldi	r19, 0x00	; 0
 93a:	a9 01       	movw	r20, r18
 93c:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__cmpsf2>
 940:	81 11       	cpse	r24, r1
 942:	04 c0       	rjmp	.+8      	; 0x94c <__stack+0x4d>
		targetCurrent_steps = 128;
 944:	80 e8       	ldi	r24, 0x80	; 128
 946:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <targetCurrent_steps>
 94a:	14 c0       	rjmp	.+40     	; 0x974 <__stack+0x75>
	} else if (targetCurrent > 255) {
 94c:	20 e0       	ldi	r18, 0x00	; 0
 94e:	30 e0       	ldi	r19, 0x00	; 0
 950:	4f e7       	ldi	r20, 0x7F	; 127
 952:	53 e4       	ldi	r21, 0x43	; 67
 954:	c7 01       	movw	r24, r14
 956:	b6 01       	movw	r22, r12
 958:	0e 94 f1 06 	call	0xde2	; 0xde2 <__gesf2>
 95c:	18 16       	cp	r1, r24
 95e:	24 f4       	brge	.+8      	; 0x968 <__stack+0x69>
		targetCurrent_steps = 255;
 960:	8f ef       	ldi	r24, 0xFF	; 255
 962:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <targetCurrent_steps>
 966:	06 c0       	rjmp	.+12     	; 0x974 <__stack+0x75>
	} else {
		targetCurrent_steps = targetCurrent;
 968:	c7 01       	movw	r24, r14
 96a:	b6 01       	movw	r22, r12
 96c:	0e 94 be 05 	call	0xb7c	; 0xb7c <__fixunssfsi>
 970:	60 93 09 01 	sts	0x0109, r22	; 0x800109 <targetCurrent_steps>
	}
}
 974:	ff 90       	pop	r15
 976:	ef 90       	pop	r14
 978:	df 90       	pop	r13
 97a:	cf 90       	pop	r12
 97c:	08 95       	ret

Disassembly of section .text.updateMotorPID:

0000027c <updateMotorPID>:

void updateMotorPID(){
 27c:	cf 92       	push	r12
 27e:	df 92       	push	r13
 280:	ef 92       	push	r14
 282:	ff 92       	push	r15
 284:	cf 93       	push	r28
 286:	df 93       	push	r29
	float error = targetCurrent_steps - motorCurrent_steps;
 288:	c0 91 09 01 	lds	r28, 0x0109	; 0x800109 <targetCurrent_steps>
 28c:	d0 e0       	ldi	r29, 0x00	; 0
 28e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 292:	be 01       	movw	r22, r28
 294:	68 1b       	sub	r22, r24
 296:	71 09       	sbc	r23, r1
 298:	07 2e       	mov	r0, r23
 29a:	00 0c       	add	r0, r0
 29c:	88 0b       	sbc	r24, r24
 29e:	99 0b       	sbc	r25, r25
 2a0:	0e 94 18 05 	call	0xa30	; 0xa30 <__floatsisf>
	error *= 0.05;
 2a4:	2d ec       	ldi	r18, 0xCD	; 205
 2a6:	3c ec       	ldi	r19, 0xCC	; 204
 2a8:	4c e4       	ldi	r20, 0x4C	; 76
 2aa:	5d e3       	ldi	r21, 0x3D	; 61
 2ac:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <__mulsf3>
	
	motorVoltageControl += error;	
 2b0:	20 91 3a 02 	lds	r18, 0x023A	; 0x80023a <motorVoltageControl>
 2b4:	30 91 3b 02 	lds	r19, 0x023B	; 0x80023b <motorVoltageControl+0x1>
 2b8:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <motorVoltageControl+0x2>
 2bc:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <motorVoltageControl+0x3>
 2c0:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__addsf3>
	if (motorVoltageControl < -127) {
 2c4:	20 e0       	ldi	r18, 0x00	; 0
 2c6:	30 e0       	ldi	r19, 0x00	; 0
 2c8:	4e ef       	ldi	r20, 0xFE	; 254
 2ca:	52 ec       	ldi	r21, 0xC2	; 194
 2cc:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__cmpsf2>
 2d0:	88 23       	and	r24, r24
 2d2:	04 f0       	brlt	.+0      	; 0x2d4 <updateMotorPID+0x58>
	} else if (motorVoltageControl > 127) {
		motorVoltageControl = 127;
	} 
	
	// FOR DEBUGGING*****
	motorVoltageControl = targetCurrent_steps - 128;
 2d4:	be 01       	movw	r22, r28
 2d6:	60 58       	subi	r22, 0x80	; 128
 2d8:	71 09       	sbc	r23, r1
 2da:	07 2e       	mov	r0, r23
 2dc:	00 0c       	add	r0, r0
 2de:	88 0b       	sbc	r24, r24
 2e0:	99 0b       	sbc	r25, r25
 2e2:	0e 94 18 05 	call	0xa30	; 0xa30 <__floatsisf>
 2e6:	6b 01       	movw	r12, r22
 2e8:	7c 01       	movw	r14, r24
 2ea:	60 93 3a 02 	sts	0x023A, r22	; 0x80023a <motorVoltageControl>
 2ee:	70 93 3b 02 	sts	0x023B, r23	; 0x80023b <motorVoltageControl+0x1>
 2f2:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <motorVoltageControl+0x2>
 2f6:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <motorVoltageControl+0x3>
	// ******************
	
	if (motorVoltageControl < 0) {
 2fa:	20 e0       	ldi	r18, 0x00	; 0
 2fc:	30 e0       	ldi	r19, 0x00	; 0
 2fe:	a9 01       	movw	r20, r18
 300:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__cmpsf2>
 304:	88 23       	and	r24, r24
 306:	b4 f4       	brge	.+44     	; 0x334 <updateMotorPID+0xb8>
		MOTOR_DUTY_CYCLE = -motorVoltageControl;
 308:	c7 01       	movw	r24, r14
 30a:	b6 01       	movw	r22, r12
 30c:	90 58       	subi	r25, 0x80	; 128
 30e:	0e 94 be 05 	call	0xb7c	; 0xb7c <__fixunssfsi>
 312:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 316:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
		digitalWrite(MOTOR_REV, 1);
 31a:	41 e0       	ldi	r20, 0x01	; 1
 31c:	50 e0       	ldi	r21, 0x00	; 0
 31e:	64 e0       	ldi	r22, 0x04	; 4
 320:	84 e4       	ldi	r24, 0x44	; 68
 322:	0e 94 cf 01 	call	0x39e	; 0x39e <digitalWrite>
		digitalWrite(MOTOR_FWD, 0);
 326:	40 e0       	ldi	r20, 0x00	; 0
 328:	50 e0       	ldi	r21, 0x00	; 0
 32a:	60 e0       	ldi	r22, 0x00	; 0
 32c:	82 e4       	ldi	r24, 0x42	; 66
 32e:	0e 94 cf 01 	call	0x39e	; 0x39e <digitalWrite>
 332:	2e c0       	rjmp	.+92     	; 0x390 <updateMotorPID+0x114>
	} else if (motorVoltageControl > 0) {
 334:	20 e0       	ldi	r18, 0x00	; 0
 336:	30 e0       	ldi	r19, 0x00	; 0
 338:	a9 01       	movw	r20, r18
 33a:	c7 01       	movw	r24, r14
 33c:	b6 01       	movw	r22, r12
 33e:	0e 94 f1 06 	call	0xde2	; 0xde2 <__gesf2>
 342:	18 16       	cp	r1, r24
 344:	ac f4       	brge	.+42     	; 0x370 <updateMotorPID+0xf4>
		MOTOR_DUTY_CYCLE = motorVoltageControl;
 346:	c7 01       	movw	r24, r14
 348:	b6 01       	movw	r22, r12
 34a:	0e 94 be 05 	call	0xb7c	; 0xb7c <__fixunssfsi>
 34e:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 352:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
		digitalWrite(MOTOR_REV, 0);
 356:	40 e0       	ldi	r20, 0x00	; 0
 358:	50 e0       	ldi	r21, 0x00	; 0
 35a:	64 e0       	ldi	r22, 0x04	; 4
 35c:	84 e4       	ldi	r24, 0x44	; 68
 35e:	0e 94 cf 01 	call	0x39e	; 0x39e <digitalWrite>
		digitalWrite(MOTOR_FWD, 1);
 362:	41 e0       	ldi	r20, 0x01	; 1
 364:	50 e0       	ldi	r21, 0x00	; 0
 366:	60 e0       	ldi	r22, 0x00	; 0
 368:	82 e4       	ldi	r24, 0x42	; 66
 36a:	0e 94 cf 01 	call	0x39e	; 0x39e <digitalWrite>
 36e:	10 c0       	rjmp	.+32     	; 0x390 <updateMotorPID+0x114>
	} else {
		MOTOR_DUTY_CYCLE = 0;
 370:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 374:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
		digitalWrite(MOTOR_REV, 0);
 378:	40 e0       	ldi	r20, 0x00	; 0
 37a:	50 e0       	ldi	r21, 0x00	; 0
 37c:	64 e0       	ldi	r22, 0x04	; 4
 37e:	84 e4       	ldi	r24, 0x44	; 68
 380:	0e 94 cf 01 	call	0x39e	; 0x39e <digitalWrite>
		digitalWrite(MOTOR_FWD, 0);
 384:	40 e0       	ldi	r20, 0x00	; 0
 386:	50 e0       	ldi	r21, 0x00	; 0
 388:	60 e0       	ldi	r22, 0x00	; 0
 38a:	82 e4       	ldi	r24, 0x42	; 66
 38c:	0e 94 cf 01 	call	0x39e	; 0x39e <digitalWrite>
	}
}
 390:	df 91       	pop	r29
 392:	cf 91       	pop	r28
 394:	ff 90       	pop	r15
 396:	ef 90       	pop	r14
 398:	df 90       	pop	r13
 39a:	cf 90       	pop	r12
 39c:	08 95       	ret

Disassembly of section .text.updateResistorPID:

00000d76 <updateResistorPID>:

void updateResistorPID(){
	#warning "Write resistor PID and test resistor outputs"
	RESISTOR_DUTY_CYCLE = MOTOR_DUTY_CYCLE;
 d76:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 d7a:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 d7e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 d82:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 d86:	08 95       	ret

Disassembly of section .text.__vector_9:

00000bda <__vector_9>:
void getTargetCurrent();
float motorVoltageControl;

#warning "Get temperature of controller from ADC8"

ISR (TIMER2_OVF_vect) {
 bda:	1f 92       	push	r1
 bdc:	0f 92       	push	r0
 bde:	0f b6       	in	r0, 0x3f	; 63
 be0:	0f 92       	push	r0
 be2:	11 24       	eor	r1, r1
 be4:	2f 93       	push	r18
 be6:	3f 93       	push	r19
 be8:	4f 93       	push	r20
 bea:	5f 93       	push	r21
 bec:	6f 93       	push	r22
 bee:	7f 93       	push	r23
 bf0:	8f 93       	push	r24
 bf2:	9f 93       	push	r25
 bf4:	af 93       	push	r26
 bf6:	bf 93       	push	r27
 bf8:	ef 93       	push	r30
 bfa:	ff 93       	push	r31
	TCNT2 = 99;	// 100 Hz sampling	
 bfc:	83 e6       	ldi	r24, 0x63	; 99
 bfe:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
	sampleInputs();
 c02:	0e 94 6a 00 	call	0xd4	; 0xd4 <_etext>
	getTargetCurrent();	
 c06:	0e 94 63 04 	call	0x8c6	; 0x8c6 <getTargetCurrent>
	updateMotorPID();
 c0a:	0e 94 3e 01 	call	0x27c	; 0x27c <updateMotorPID>
	updateResistorPID();
 c0e:	0e 94 bb 06 	call	0xd76	; 0xd76 <updateResistorPID>
}
 c12:	ff 91       	pop	r31
 c14:	ef 91       	pop	r30
 c16:	bf 91       	pop	r27
 c18:	af 91       	pop	r26
 c1a:	9f 91       	pop	r25
 c1c:	8f 91       	pop	r24
 c1e:	7f 91       	pop	r23
 c20:	6f 91       	pop	r22
 c22:	5f 91       	pop	r21
 c24:	4f 91       	pop	r20
 c26:	3f 91       	pop	r19
 c28:	2f 91       	pop	r18
 c2a:	0f 90       	pop	r0
 c2c:	0f be       	out	0x3f, r0	; 63
 c2e:	0f 90       	pop	r0
 c30:	1f 90       	pop	r1
 c32:	18 95       	reti

Disassembly of section .text.updateAnalogInputs:

0000097e <updateAnalogInputs>:
	#warning "Write resistor PID and test resistor outputs"
	RESISTOR_DUTY_CYCLE = MOTOR_DUTY_CYCLE;
}

void updateAnalogInputs(){
	if (!(ADCSRA & (1 << ADSC))) {
 97e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 982:	86 fd       	sbrc	r24, 6
 984:	52 c0       	rjmp	.+164    	; 0xa2a <updateAnalogInputs+0xac>
		// ADC conversion not running, start new conversion
		switch (currentADC){
 986:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <currentADC>
 98a:	8e 2f       	mov	r24, r30
 98c:	90 e0       	ldi	r25, 0x00	; 0
 98e:	89 30       	cpi	r24, 0x09	; 9
 990:	91 05       	cpc	r25, r1
 992:	e0 f5       	brcc	.+120    	; 0xa0c <updateAnalogInputs+0x8e>
 994:	fc 01       	movw	r30, r24
 996:	ec 5c       	subi	r30, 0xCC	; 204
 998:	ff 4f       	sbci	r31, 0xFF	; 255
 99a:	0c 94 e6 06 	jmp	0xdcc	; 0xdcc <__tablejump2__>
			case 0:
				potSlope_steps = ADCH;
 99e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 9a2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <potSlope_steps>
				currentADC = 1;
 9a6:	81 e0       	ldi	r24, 0x01	; 1
 9a8:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <currentADC>
				break;
 9ac:	31 c0       	rjmp	.+98     	; 0xa10 <updateAnalogInputs+0x92>
			case 1:
				potFriction_steps = ADCH;
 9ae:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 9b2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <potFriction_steps>
				currentADC = 2;
 9b6:	82 e0       	ldi	r24, 0x02	; 2
 9b8:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <currentADC>
				break;
 9bc:	29 c0       	rjmp	.+82     	; 0xa10 <updateAnalogInputs+0x92>
			case 2:
				battTemp_steps = ADCH;
 9be:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 9c2:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <battTemp_steps>
				currentADC = 3;
 9c6:	83 e0       	ldi	r24, 0x03	; 3
 9c8:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <currentADC>
				break;
 9cc:	21 c0       	rjmp	.+66     	; 0xa10 <updateAnalogInputs+0x92>
			case 3:
				motorCurrent_steps = ADCH;
 9ce:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 9d2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
				currentADC = 4;
 9d6:	84 e0       	ldi	r24, 0x04	; 4
 9d8:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <currentADC>
				break;
 9dc:	19 c0       	rjmp	.+50     	; 0xa10 <updateAnalogInputs+0x92>
			case 4:
				battVoltageRef_steps = ADCH;
 9de:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 9e2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <battVoltageRef_steps>
				currentADC = 7;
 9e6:	87 e0       	ldi	r24, 0x07	; 7
 9e8:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <currentADC>
				break;
 9ec:	11 c0       	rjmp	.+34     	; 0xa10 <updateAnalogInputs+0x92>
			case 7:
				potMomentum_steps = ADCH;
 9ee:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 9f2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <potMomentum_steps>
				currentADC = 8;
 9f6:	88 e0       	ldi	r24, 0x08	; 8
 9f8:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <currentADC>
				break;
 9fc:	09 c0       	rjmp	.+18     	; 0xa10 <updateAnalogInputs+0x92>
			case 8:
				controllerTemp_steps = ADCH;
 9fe:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 a02:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <controllerTemp_steps>
				currentADC = 0;
 a06:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <currentADC>
				break;
 a0a:	02 c0       	rjmp	.+4      	; 0xa10 <updateAnalogInputs+0x92>
			default:
				currentADC = 0;
 a0c:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <currentADC>
				break;
		}
			
		ADMUX = ADMUX & 0b11110000 | currentADC; // Set ADC channel to scan
 a10:	ec e7       	ldi	r30, 0x7C	; 124
 a12:	f0 e0       	ldi	r31, 0x00	; 0
 a14:	80 81       	ld	r24, Z
 a16:	80 7f       	andi	r24, 0xF0	; 240
 a18:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <currentADC>
 a1c:	89 2b       	or	r24, r25
 a1e:	80 83       	st	Z, r24
		ADCSRA |= (1 << ADSC); // Start conversion again
 a20:	ea e7       	ldi	r30, 0x7A	; 122
 a22:	f0 e0       	ldi	r31, 0x00	; 0
 a24:	80 81       	ld	r24, Z
 a26:	80 64       	ori	r24, 0x40	; 64
 a28:	80 83       	st	Z, r24
 a2a:	08 95       	ret

Disassembly of section .text.main:

00000cf0 <main>:
	}
}

int main(void)
{
	setPinModes();
 cf0:	0e 94 53 02 	call	0x4a6	; 0x4a6 <setPinModes>
	setPwmTimers();
 cf4:	0e 94 ae 06 	call	0xd5c	; 0xd5c <setPwmTimers>
	setAnalogInputs();
 cf8:	0e 94 60 06 	call	0xcc0	; 0xcc0 <setAnalogInputs>
	setSampleTimer();
 cfc:	0e 94 8b 06 	call	0xd16	; 0xd16 <setSampleTimer>
	sei();	
 d00:	78 94       	sei
	
    while(1)
    {
		updateAnalogInputs();		
 d02:	0e 94 bf 04 	call	0x97e	; 0x97e <updateAnalogInputs>
		RESISTOR_DUTY_CYCLE = motorCurrent_steps;
 d06:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 d0a:	90 e0       	ldi	r25, 0x00	; 0
 d0c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 d10:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 d14:	f6 cf       	rjmp	.-20     	; 0xd02 <main+0x12>

Disassembly of section .text.avrlibc.fplib:

00000d88 <__subsf3>:
 d88:	50 58       	subi	r21, 0x80	; 128

00000d8a <__addsf3>:
 d8a:	bb 27       	eor	r27, r27
 d8c:	aa 27       	eor	r26, r26
 d8e:	0e 94 9b 03 	call	0x736	; 0x736 <__addsf3x>
 d92:	0c 94 9d 06 	jmp	0xd3a	; 0xd3a <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00000736 <__addsf3x>:
 736:	11 c0       	rjmp	.+34     	; 0x75a <__addsf3x+0x24>
 738:	0e 94 cb 06 	call	0xd96	; 0xd96 <__fp_pscA>
 73c:	38 f0       	brcs	.+14     	; 0x74c <__addsf3x+0x16>
 73e:	0e 94 d2 06 	call	0xda4	; 0xda4 <__fp_pscB>
 742:	20 f0       	brcs	.+8      	; 0x74c <__addsf3x+0x16>
 744:	39 f4       	brne	.+14     	; 0x754 <__addsf3x+0x1e>
 746:	9f 3f       	cpi	r25, 0xFF	; 255
 748:	19 f4       	brne	.+6      	; 0x750 <__addsf3x+0x1a>
 74a:	26 f4       	brtc	.+8      	; 0x754 <__addsf3x+0x1e>
 74c:	0c 94 fe 06 	jmp	0xdfc	; 0xdfc <__fp_nan>
 750:	0e f4       	brtc	.+2      	; 0x754 <__addsf3x+0x1e>
 752:	e0 95       	com	r30
 754:	e7 fb       	bst	r30, 7
 756:	0c 94 e0 06 	jmp	0xdc0	; 0xdc0 <__fp_inf>
 75a:	e9 2f       	mov	r30, r25
 75c:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__fp_split3>
 760:	58 f3       	brcs	.-42     	; 0x738 <__addsf3x+0x2>
 762:	ba 17       	cp	r27, r26
 764:	62 07       	cpc	r22, r18
 766:	73 07       	cpc	r23, r19
 768:	84 07       	cpc	r24, r20
 76a:	95 07       	cpc	r25, r21
 76c:	20 f0       	brcs	.+8      	; 0x776 <__addsf3x+0x40>
 76e:	79 f4       	brne	.+30     	; 0x78e <__addsf3x+0x58>
 770:	a6 f5       	brtc	.+104    	; 0x7da <__addsf3x+0xa4>
 772:	0c 94 d9 06 	jmp	0xdb2	; 0xdb2 <__fp_zero>
 776:	0e f4       	brtc	.+2      	; 0x77a <__addsf3x+0x44>
 778:	e0 95       	com	r30
 77a:	0b 2e       	mov	r0, r27
 77c:	ba 2f       	mov	r27, r26
 77e:	a0 2d       	mov	r26, r0
 780:	0b 01       	movw	r0, r22
 782:	b9 01       	movw	r22, r18
 784:	90 01       	movw	r18, r0
 786:	0c 01       	movw	r0, r24
 788:	ca 01       	movw	r24, r20
 78a:	a0 01       	movw	r20, r0
 78c:	11 24       	eor	r1, r1
 78e:	ff 27       	eor	r31, r31
 790:	59 1b       	sub	r21, r25
 792:	99 f0       	breq	.+38     	; 0x7ba <__addsf3x+0x84>
 794:	59 3f       	cpi	r21, 0xF9	; 249
 796:	50 f4       	brcc	.+20     	; 0x7ac <__addsf3x+0x76>
 798:	50 3e       	cpi	r21, 0xE0	; 224
 79a:	68 f1       	brcs	.+90     	; 0x7f6 <__addsf3x+0xc0>
 79c:	1a 16       	cp	r1, r26
 79e:	f0 40       	sbci	r31, 0x00	; 0
 7a0:	a2 2f       	mov	r26, r18
 7a2:	23 2f       	mov	r18, r19
 7a4:	34 2f       	mov	r19, r20
 7a6:	44 27       	eor	r20, r20
 7a8:	58 5f       	subi	r21, 0xF8	; 248
 7aa:	f3 cf       	rjmp	.-26     	; 0x792 <__addsf3x+0x5c>
 7ac:	46 95       	lsr	r20
 7ae:	37 95       	ror	r19
 7b0:	27 95       	ror	r18
 7b2:	a7 95       	ror	r26
 7b4:	f0 40       	sbci	r31, 0x00	; 0
 7b6:	53 95       	inc	r21
 7b8:	c9 f7       	brne	.-14     	; 0x7ac <__addsf3x+0x76>
 7ba:	7e f4       	brtc	.+30     	; 0x7da <__addsf3x+0xa4>
 7bc:	1f 16       	cp	r1, r31
 7be:	ba 0b       	sbc	r27, r26
 7c0:	62 0b       	sbc	r22, r18
 7c2:	73 0b       	sbc	r23, r19
 7c4:	84 0b       	sbc	r24, r20
 7c6:	ba f0       	brmi	.+46     	; 0x7f6 <__addsf3x+0xc0>
 7c8:	91 50       	subi	r25, 0x01	; 1
 7ca:	a1 f0       	breq	.+40     	; 0x7f4 <__addsf3x+0xbe>
 7cc:	ff 0f       	add	r31, r31
 7ce:	bb 1f       	adc	r27, r27
 7d0:	66 1f       	adc	r22, r22
 7d2:	77 1f       	adc	r23, r23
 7d4:	88 1f       	adc	r24, r24
 7d6:	c2 f7       	brpl	.-16     	; 0x7c8 <__addsf3x+0x92>
 7d8:	0e c0       	rjmp	.+28     	; 0x7f6 <__addsf3x+0xc0>
 7da:	ba 0f       	add	r27, r26
 7dc:	62 1f       	adc	r22, r18
 7de:	73 1f       	adc	r23, r19
 7e0:	84 1f       	adc	r24, r20
 7e2:	48 f4       	brcc	.+18     	; 0x7f6 <__addsf3x+0xc0>
 7e4:	87 95       	ror	r24
 7e6:	77 95       	ror	r23
 7e8:	67 95       	ror	r22
 7ea:	b7 95       	ror	r27
 7ec:	f7 95       	ror	r31
 7ee:	9e 3f       	cpi	r25, 0xFE	; 254
 7f0:	08 f0       	brcs	.+2      	; 0x7f4 <__addsf3x+0xbe>
 7f2:	b0 cf       	rjmp	.-160    	; 0x754 <__addsf3x+0x1e>
 7f4:	93 95       	inc	r25
 7f6:	88 0f       	add	r24, r24
 7f8:	08 f0       	brcs	.+2      	; 0x7fc <__addsf3x+0xc6>
 7fa:	99 27       	eor	r25, r25
 7fc:	ee 0f       	add	r30, r30
 7fe:	97 95       	ror	r25
 800:	87 95       	ror	r24
 802:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000dd8 <__cmpsf2>:
 dd8:	0e 94 1a 06 	call	0xc34	; 0xc34 <__fp_cmp>
 ddc:	08 f4       	brcc	.+2      	; 0xde0 <__cmpsf2+0x8>
 dde:	81 e0       	ldi	r24, 0x01	; 1
 de0:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000dec <__divsf3>:
 dec:	0e 94 c2 02 	call	0x584	; 0x584 <__divsf3x>
 df0:	0c 94 9d 06 	jmp	0xd3a	; 0xd3a <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00000584 <__divsf3x>:
 584:	10 c0       	rjmp	.+32     	; 0x5a6 <__divsf3x+0x22>
 586:	0e 94 d2 06 	call	0xda4	; 0xda4 <__fp_pscB>
 58a:	58 f0       	brcs	.+22     	; 0x5a2 <__divsf3x+0x1e>
 58c:	0e 94 cb 06 	call	0xd96	; 0xd96 <__fp_pscA>
 590:	40 f0       	brcs	.+16     	; 0x5a2 <__divsf3x+0x1e>
 592:	29 f4       	brne	.+10     	; 0x59e <__divsf3x+0x1a>
 594:	5f 3f       	cpi	r21, 0xFF	; 255
 596:	29 f0       	breq	.+10     	; 0x5a2 <__divsf3x+0x1e>
 598:	0c 94 e0 06 	jmp	0xdc0	; 0xdc0 <__fp_inf>
 59c:	51 11       	cpse	r21, r1
 59e:	0c 94 da 06 	jmp	0xdb4	; 0xdb4 <__fp_szero>
 5a2:	0c 94 fe 06 	jmp	0xdfc	; 0xdfc <__fp_nan>
 5a6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__fp_split3>
 5aa:	68 f3       	brcs	.-38     	; 0x586 <__divsf3x+0x2>

000005ac <__divsf3_pse>:
 5ac:	99 23       	and	r25, r25
 5ae:	b1 f3       	breq	.-20     	; 0x59c <__divsf3x+0x18>
 5b0:	55 23       	and	r21, r21
 5b2:	91 f3       	breq	.-28     	; 0x598 <__divsf3x+0x14>
 5b4:	95 1b       	sub	r25, r21
 5b6:	55 0b       	sbc	r21, r21
 5b8:	bb 27       	eor	r27, r27
 5ba:	aa 27       	eor	r26, r26
 5bc:	62 17       	cp	r22, r18
 5be:	73 07       	cpc	r23, r19
 5c0:	84 07       	cpc	r24, r20
 5c2:	38 f0       	brcs	.+14     	; 0x5d2 <__divsf3_pse+0x26>
 5c4:	9f 5f       	subi	r25, 0xFF	; 255
 5c6:	5f 4f       	sbci	r21, 0xFF	; 255
 5c8:	22 0f       	add	r18, r18
 5ca:	33 1f       	adc	r19, r19
 5cc:	44 1f       	adc	r20, r20
 5ce:	aa 1f       	adc	r26, r26
 5d0:	a9 f3       	breq	.-22     	; 0x5bc <__divsf3_pse+0x10>
 5d2:	35 d0       	rcall	.+106    	; 0x63e <__divsf3_pse+0x92>
 5d4:	0e 2e       	mov	r0, r30
 5d6:	3a f0       	brmi	.+14     	; 0x5e6 <__divsf3_pse+0x3a>
 5d8:	e0 e8       	ldi	r30, 0x80	; 128
 5da:	32 d0       	rcall	.+100    	; 0x640 <__divsf3_pse+0x94>
 5dc:	91 50       	subi	r25, 0x01	; 1
 5de:	50 40       	sbci	r21, 0x00	; 0
 5e0:	e6 95       	lsr	r30
 5e2:	00 1c       	adc	r0, r0
 5e4:	ca f7       	brpl	.-14     	; 0x5d8 <__divsf3_pse+0x2c>
 5e6:	2b d0       	rcall	.+86     	; 0x63e <__divsf3_pse+0x92>
 5e8:	fe 2f       	mov	r31, r30
 5ea:	29 d0       	rcall	.+82     	; 0x63e <__divsf3_pse+0x92>
 5ec:	66 0f       	add	r22, r22
 5ee:	77 1f       	adc	r23, r23
 5f0:	88 1f       	adc	r24, r24
 5f2:	bb 1f       	adc	r27, r27
 5f4:	26 17       	cp	r18, r22
 5f6:	37 07       	cpc	r19, r23
 5f8:	48 07       	cpc	r20, r24
 5fa:	ab 07       	cpc	r26, r27
 5fc:	b0 e8       	ldi	r27, 0x80	; 128
 5fe:	09 f0       	breq	.+2      	; 0x602 <__divsf3_pse+0x56>
 600:	bb 0b       	sbc	r27, r27
 602:	80 2d       	mov	r24, r0
 604:	bf 01       	movw	r22, r30
 606:	ff 27       	eor	r31, r31
 608:	93 58       	subi	r25, 0x83	; 131
 60a:	5f 4f       	sbci	r21, 0xFF	; 255
 60c:	3a f0       	brmi	.+14     	; 0x61c <__divsf3_pse+0x70>
 60e:	9e 3f       	cpi	r25, 0xFE	; 254
 610:	51 05       	cpc	r21, r1
 612:	78 f0       	brcs	.+30     	; 0x632 <__divsf3_pse+0x86>
 614:	0c 94 e0 06 	jmp	0xdc0	; 0xdc0 <__fp_inf>
 618:	0c 94 da 06 	jmp	0xdb4	; 0xdb4 <__fp_szero>
 61c:	5f 3f       	cpi	r21, 0xFF	; 255
 61e:	e4 f3       	brlt	.-8      	; 0x618 <__divsf3_pse+0x6c>
 620:	98 3e       	cpi	r25, 0xE8	; 232
 622:	d4 f3       	brlt	.-12     	; 0x618 <__divsf3_pse+0x6c>
 624:	86 95       	lsr	r24
 626:	77 95       	ror	r23
 628:	67 95       	ror	r22
 62a:	b7 95       	ror	r27
 62c:	f7 95       	ror	r31
 62e:	9f 5f       	subi	r25, 0xFF	; 255
 630:	c9 f7       	brne	.-14     	; 0x624 <__divsf3_pse+0x78>
 632:	88 0f       	add	r24, r24
 634:	91 1d       	adc	r25, r1
 636:	96 95       	lsr	r25
 638:	87 95       	ror	r24
 63a:	97 f9       	bld	r25, 7
 63c:	08 95       	ret
 63e:	e1 e0       	ldi	r30, 0x01	; 1
 640:	66 0f       	add	r22, r22
 642:	77 1f       	adc	r23, r23
 644:	88 1f       	adc	r24, r24
 646:	bb 1f       	adc	r27, r27
 648:	62 17       	cp	r22, r18
 64a:	73 07       	cpc	r23, r19
 64c:	84 07       	cpc	r24, r20
 64e:	ba 07       	cpc	r27, r26
 650:	20 f0       	brcs	.+8      	; 0x65a <__divsf3_pse+0xae>
 652:	62 1b       	sub	r22, r18
 654:	73 0b       	sbc	r23, r19
 656:	84 0b       	sbc	r24, r20
 658:	ba 0b       	sbc	r27, r26
 65a:	ee 1f       	adc	r30, r30
 65c:	88 f7       	brcc	.-30     	; 0x640 <__divsf3_pse+0x94>
 65e:	e0 95       	com	r30
 660:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000b7c <__fixunssfsi>:
 b7c:	0e 94 46 06 	call	0xc8c	; 0xc8c <__fp_splitA>
 b80:	88 f0       	brcs	.+34     	; 0xba4 <__fixunssfsi+0x28>
 b82:	9f 57       	subi	r25, 0x7F	; 127
 b84:	98 f0       	brcs	.+38     	; 0xbac <__fixunssfsi+0x30>
 b86:	b9 2f       	mov	r27, r25
 b88:	99 27       	eor	r25, r25
 b8a:	b7 51       	subi	r27, 0x17	; 23
 b8c:	b0 f0       	brcs	.+44     	; 0xbba <__fixunssfsi+0x3e>
 b8e:	e1 f0       	breq	.+56     	; 0xbc8 <__fixunssfsi+0x4c>
 b90:	66 0f       	add	r22, r22
 b92:	77 1f       	adc	r23, r23
 b94:	88 1f       	adc	r24, r24
 b96:	99 1f       	adc	r25, r25
 b98:	1a f0       	brmi	.+6      	; 0xba0 <__fixunssfsi+0x24>
 b9a:	ba 95       	dec	r27
 b9c:	c9 f7       	brne	.-14     	; 0xb90 <__fixunssfsi+0x14>
 b9e:	14 c0       	rjmp	.+40     	; 0xbc8 <__fixunssfsi+0x4c>
 ba0:	b1 30       	cpi	r27, 0x01	; 1
 ba2:	91 f0       	breq	.+36     	; 0xbc8 <__fixunssfsi+0x4c>
 ba4:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <__fp_zero>
 ba8:	b1 e0       	ldi	r27, 0x01	; 1
 baa:	08 95       	ret
 bac:	0c 94 d9 06 	jmp	0xdb2	; 0xdb2 <__fp_zero>
 bb0:	67 2f       	mov	r22, r23
 bb2:	78 2f       	mov	r23, r24
 bb4:	88 27       	eor	r24, r24
 bb6:	b8 5f       	subi	r27, 0xF8	; 248
 bb8:	39 f0       	breq	.+14     	; 0xbc8 <__fixunssfsi+0x4c>
 bba:	b9 3f       	cpi	r27, 0xF9	; 249
 bbc:	cc f3       	brlt	.-14     	; 0xbb0 <__fixunssfsi+0x34>
 bbe:	86 95       	lsr	r24
 bc0:	77 95       	ror	r23
 bc2:	67 95       	ror	r22
 bc4:	b3 95       	inc	r27
 bc6:	d9 f7       	brne	.-10     	; 0xbbe <__fixunssfsi+0x42>
 bc8:	3e f4       	brtc	.+14     	; 0xbd8 <__fixunssfsi+0x5c>
 bca:	90 95       	com	r25
 bcc:	80 95       	com	r24
 bce:	70 95       	com	r23
 bd0:	61 95       	neg	r22
 bd2:	7f 4f       	sbci	r23, 0xFF	; 255
 bd4:	8f 4f       	sbci	r24, 0xFF	; 255
 bd6:	9f 4f       	sbci	r25, 0xFF	; 255
 bd8:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000a2c <__floatunsisf>:
 a2c:	e8 94       	clt
 a2e:	09 c0       	rjmp	.+18     	; 0xa42 <__floatsisf+0x12>

00000a30 <__floatsisf>:
 a30:	97 fb       	bst	r25, 7
 a32:	3e f4       	brtc	.+14     	; 0xa42 <__floatsisf+0x12>
 a34:	90 95       	com	r25
 a36:	80 95       	com	r24
 a38:	70 95       	com	r23
 a3a:	61 95       	neg	r22
 a3c:	7f 4f       	sbci	r23, 0xFF	; 255
 a3e:	8f 4f       	sbci	r24, 0xFF	; 255
 a40:	9f 4f       	sbci	r25, 0xFF	; 255
 a42:	99 23       	and	r25, r25
 a44:	a9 f0       	breq	.+42     	; 0xa70 <__floatsisf+0x40>
 a46:	f9 2f       	mov	r31, r25
 a48:	96 e9       	ldi	r25, 0x96	; 150
 a4a:	bb 27       	eor	r27, r27
 a4c:	93 95       	inc	r25
 a4e:	f6 95       	lsr	r31
 a50:	87 95       	ror	r24
 a52:	77 95       	ror	r23
 a54:	67 95       	ror	r22
 a56:	b7 95       	ror	r27
 a58:	f1 11       	cpse	r31, r1
 a5a:	f8 cf       	rjmp	.-16     	; 0xa4c <__floatsisf+0x1c>
 a5c:	fa f4       	brpl	.+62     	; 0xa9c <__floatsisf+0x6c>
 a5e:	bb 0f       	add	r27, r27
 a60:	11 f4       	brne	.+4      	; 0xa66 <__floatsisf+0x36>
 a62:	60 ff       	sbrs	r22, 0
 a64:	1b c0       	rjmp	.+54     	; 0xa9c <__floatsisf+0x6c>
 a66:	6f 5f       	subi	r22, 0xFF	; 255
 a68:	7f 4f       	sbci	r23, 0xFF	; 255
 a6a:	8f 4f       	sbci	r24, 0xFF	; 255
 a6c:	9f 4f       	sbci	r25, 0xFF	; 255
 a6e:	16 c0       	rjmp	.+44     	; 0xa9c <__floatsisf+0x6c>
 a70:	88 23       	and	r24, r24
 a72:	11 f0       	breq	.+4      	; 0xa78 <__floatsisf+0x48>
 a74:	96 e9       	ldi	r25, 0x96	; 150
 a76:	11 c0       	rjmp	.+34     	; 0xa9a <__floatsisf+0x6a>
 a78:	77 23       	and	r23, r23
 a7a:	21 f0       	breq	.+8      	; 0xa84 <__floatsisf+0x54>
 a7c:	9e e8       	ldi	r25, 0x8E	; 142
 a7e:	87 2f       	mov	r24, r23
 a80:	76 2f       	mov	r23, r22
 a82:	05 c0       	rjmp	.+10     	; 0xa8e <__floatsisf+0x5e>
 a84:	66 23       	and	r22, r22
 a86:	71 f0       	breq	.+28     	; 0xaa4 <__floatsisf+0x74>
 a88:	96 e8       	ldi	r25, 0x86	; 134
 a8a:	86 2f       	mov	r24, r22
 a8c:	70 e0       	ldi	r23, 0x00	; 0
 a8e:	60 e0       	ldi	r22, 0x00	; 0
 a90:	2a f0       	brmi	.+10     	; 0xa9c <__floatsisf+0x6c>
 a92:	9a 95       	dec	r25
 a94:	66 0f       	add	r22, r22
 a96:	77 1f       	adc	r23, r23
 a98:	88 1f       	adc	r24, r24
 a9a:	da f7       	brpl	.-10     	; 0xa92 <__floatsisf+0x62>
 a9c:	88 0f       	add	r24, r24
 a9e:	96 95       	lsr	r25
 aa0:	87 95       	ror	r24
 aa2:	97 f9       	bld	r25, 7
 aa4:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000c34 <__fp_cmp>:
 c34:	99 0f       	add	r25, r25
 c36:	00 08       	sbc	r0, r0
 c38:	55 0f       	add	r21, r21
 c3a:	aa 0b       	sbc	r26, r26
 c3c:	e0 e8       	ldi	r30, 0x80	; 128
 c3e:	fe ef       	ldi	r31, 0xFE	; 254
 c40:	16 16       	cp	r1, r22
 c42:	17 06       	cpc	r1, r23
 c44:	e8 07       	cpc	r30, r24
 c46:	f9 07       	cpc	r31, r25
 c48:	c0 f0       	brcs	.+48     	; 0xc7a <__fp_cmp+0x46>
 c4a:	12 16       	cp	r1, r18
 c4c:	13 06       	cpc	r1, r19
 c4e:	e4 07       	cpc	r30, r20
 c50:	f5 07       	cpc	r31, r21
 c52:	98 f0       	brcs	.+38     	; 0xc7a <__fp_cmp+0x46>
 c54:	62 1b       	sub	r22, r18
 c56:	73 0b       	sbc	r23, r19
 c58:	84 0b       	sbc	r24, r20
 c5a:	95 0b       	sbc	r25, r21
 c5c:	39 f4       	brne	.+14     	; 0xc6c <__fp_cmp+0x38>
 c5e:	0a 26       	eor	r0, r26
 c60:	61 f0       	breq	.+24     	; 0xc7a <__fp_cmp+0x46>
 c62:	23 2b       	or	r18, r19
 c64:	24 2b       	or	r18, r20
 c66:	25 2b       	or	r18, r21
 c68:	21 f4       	brne	.+8      	; 0xc72 <__fp_cmp+0x3e>
 c6a:	08 95       	ret
 c6c:	0a 26       	eor	r0, r26
 c6e:	09 f4       	brne	.+2      	; 0xc72 <__fp_cmp+0x3e>
 c70:	a1 40       	sbci	r26, 0x01	; 1
 c72:	a6 95       	lsr	r26
 c74:	8f ef       	ldi	r24, 0xFF	; 255
 c76:	81 1d       	adc	r24, r1
 c78:	81 1d       	adc	r24, r1
 c7a:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000dc0 <__fp_inf>:
 dc0:	97 f9       	bld	r25, 7
 dc2:	9f 67       	ori	r25, 0x7F	; 127
 dc4:	80 e8       	ldi	r24, 0x80	; 128
 dc6:	70 e0       	ldi	r23, 0x00	; 0
 dc8:	60 e0       	ldi	r22, 0x00	; 0
 dca:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000dfc <__fp_nan>:
 dfc:	9f ef       	ldi	r25, 0xFF	; 255
 dfe:	80 ec       	ldi	r24, 0xC0	; 192
 e00:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000d96 <__fp_pscA>:
 d96:	00 24       	eor	r0, r0
 d98:	0a 94       	dec	r0
 d9a:	16 16       	cp	r1, r22
 d9c:	17 06       	cpc	r1, r23
 d9e:	18 06       	cpc	r1, r24
 da0:	09 06       	cpc	r0, r25
 da2:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000da4 <__fp_pscB>:
 da4:	00 24       	eor	r0, r0
 da6:	0a 94       	dec	r0
 da8:	12 16       	cp	r1, r18
 daa:	13 06       	cpc	r1, r19
 dac:	14 06       	cpc	r1, r20
 dae:	05 06       	cpc	r0, r21
 db0:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000d3a <__fp_round>:
 d3a:	09 2e       	mov	r0, r25
 d3c:	03 94       	inc	r0
 d3e:	00 0c       	add	r0, r0
 d40:	11 f4       	brne	.+4      	; 0xd46 <__fp_round+0xc>
 d42:	88 23       	and	r24, r24
 d44:	52 f0       	brmi	.+20     	; 0xd5a <__fp_round+0x20>
 d46:	bb 0f       	add	r27, r27
 d48:	40 f4       	brcc	.+16     	; 0xd5a <__fp_round+0x20>
 d4a:	bf 2b       	or	r27, r31
 d4c:	11 f4       	brne	.+4      	; 0xd52 <__fp_round+0x18>
 d4e:	60 ff       	sbrs	r22, 0
 d50:	04 c0       	rjmp	.+8      	; 0xd5a <__fp_round+0x20>
 d52:	6f 5f       	subi	r22, 0xFF	; 255
 d54:	7f 4f       	sbci	r23, 0xFF	; 255
 d56:	8f 4f       	sbci	r24, 0xFF	; 255
 d58:	9f 4f       	sbci	r25, 0xFF	; 255
 d5a:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000c7c <__fp_split3>:
 c7c:	57 fd       	sbrc	r21, 7
 c7e:	90 58       	subi	r25, 0x80	; 128
 c80:	44 0f       	add	r20, r20
 c82:	55 1f       	adc	r21, r21
 c84:	59 f0       	breq	.+22     	; 0xc9c <__fp_splitA+0x10>
 c86:	5f 3f       	cpi	r21, 0xFF	; 255
 c88:	71 f0       	breq	.+28     	; 0xca6 <__fp_splitA+0x1a>
 c8a:	47 95       	ror	r20

00000c8c <__fp_splitA>:
 c8c:	88 0f       	add	r24, r24
 c8e:	97 fb       	bst	r25, 7
 c90:	99 1f       	adc	r25, r25
 c92:	61 f0       	breq	.+24     	; 0xcac <__fp_splitA+0x20>
 c94:	9f 3f       	cpi	r25, 0xFF	; 255
 c96:	79 f0       	breq	.+30     	; 0xcb6 <__fp_splitA+0x2a>
 c98:	87 95       	ror	r24
 c9a:	08 95       	ret
 c9c:	12 16       	cp	r1, r18
 c9e:	13 06       	cpc	r1, r19
 ca0:	14 06       	cpc	r1, r20
 ca2:	55 1f       	adc	r21, r21
 ca4:	f2 cf       	rjmp	.-28     	; 0xc8a <__fp_split3+0xe>
 ca6:	46 95       	lsr	r20
 ca8:	f1 df       	rcall	.-30     	; 0xc8c <__fp_splitA>
 caa:	08 c0       	rjmp	.+16     	; 0xcbc <__fp_splitA+0x30>
 cac:	16 16       	cp	r1, r22
 cae:	17 06       	cpc	r1, r23
 cb0:	18 06       	cpc	r1, r24
 cb2:	99 1f       	adc	r25, r25
 cb4:	f1 cf       	rjmp	.-30     	; 0xc98 <__fp_splitA+0xc>
 cb6:	86 95       	lsr	r24
 cb8:	71 05       	cpc	r23, r1
 cba:	61 05       	cpc	r22, r1
 cbc:	08 94       	sec
 cbe:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000db2 <__fp_zero>:
 db2:	e8 94       	clt

00000db4 <__fp_szero>:
 db4:	bb 27       	eor	r27, r27
 db6:	66 27       	eor	r22, r22
 db8:	77 27       	eor	r23, r23
 dba:	cb 01       	movw	r24, r22
 dbc:	97 f9       	bld	r25, 7
 dbe:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000de2 <__gesf2>:
 de2:	0e 94 1a 06 	call	0xc34	; 0xc34 <__fp_cmp>
 de6:	08 f4       	brcc	.+2      	; 0xdea <__gesf2+0x8>
 de8:	8f ef       	ldi	r24, 0xFF	; 255
 dea:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000df4 <__mulsf3>:
 df4:	0e 94 31 03 	call	0x662	; 0x662 <__mulsf3x>
 df8:	0c 94 9d 06 	jmp	0xd3a	; 0xd3a <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00000662 <__mulsf3x>:
 662:	0f c0       	rjmp	.+30     	; 0x682 <__mulsf3x+0x20>
 664:	0e 94 cb 06 	call	0xd96	; 0xd96 <__fp_pscA>
 668:	38 f0       	brcs	.+14     	; 0x678 <__mulsf3x+0x16>
 66a:	0e 94 d2 06 	call	0xda4	; 0xda4 <__fp_pscB>
 66e:	20 f0       	brcs	.+8      	; 0x678 <__mulsf3x+0x16>
 670:	95 23       	and	r25, r21
 672:	11 f0       	breq	.+4      	; 0x678 <__mulsf3x+0x16>
 674:	0c 94 e0 06 	jmp	0xdc0	; 0xdc0 <__fp_inf>
 678:	0c 94 fe 06 	jmp	0xdfc	; 0xdfc <__fp_nan>
 67c:	11 24       	eor	r1, r1
 67e:	0c 94 da 06 	jmp	0xdb4	; 0xdb4 <__fp_szero>
 682:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__fp_split3>
 686:	70 f3       	brcs	.-36     	; 0x664 <__mulsf3x+0x2>

00000688 <__mulsf3_pse>:
 688:	95 9f       	mul	r25, r21
 68a:	c1 f3       	breq	.-16     	; 0x67c <__mulsf3x+0x1a>
 68c:	95 0f       	add	r25, r21
 68e:	50 e0       	ldi	r21, 0x00	; 0
 690:	55 1f       	adc	r21, r21
 692:	62 9f       	mul	r22, r18
 694:	f0 01       	movw	r30, r0
 696:	72 9f       	mul	r23, r18
 698:	bb 27       	eor	r27, r27
 69a:	f0 0d       	add	r31, r0
 69c:	b1 1d       	adc	r27, r1
 69e:	63 9f       	mul	r22, r19
 6a0:	aa 27       	eor	r26, r26
 6a2:	f0 0d       	add	r31, r0
 6a4:	b1 1d       	adc	r27, r1
 6a6:	aa 1f       	adc	r26, r26
 6a8:	64 9f       	mul	r22, r20
 6aa:	66 27       	eor	r22, r22
 6ac:	b0 0d       	add	r27, r0
 6ae:	a1 1d       	adc	r26, r1
 6b0:	66 1f       	adc	r22, r22
 6b2:	82 9f       	mul	r24, r18
 6b4:	22 27       	eor	r18, r18
 6b6:	b0 0d       	add	r27, r0
 6b8:	a1 1d       	adc	r26, r1
 6ba:	62 1f       	adc	r22, r18
 6bc:	73 9f       	mul	r23, r19
 6be:	b0 0d       	add	r27, r0
 6c0:	a1 1d       	adc	r26, r1
 6c2:	62 1f       	adc	r22, r18
 6c4:	83 9f       	mul	r24, r19
 6c6:	a0 0d       	add	r26, r0
 6c8:	61 1d       	adc	r22, r1
 6ca:	22 1f       	adc	r18, r18
 6cc:	74 9f       	mul	r23, r20
 6ce:	33 27       	eor	r19, r19
 6d0:	a0 0d       	add	r26, r0
 6d2:	61 1d       	adc	r22, r1
 6d4:	23 1f       	adc	r18, r19
 6d6:	84 9f       	mul	r24, r20
 6d8:	60 0d       	add	r22, r0
 6da:	21 1d       	adc	r18, r1
 6dc:	82 2f       	mov	r24, r18
 6de:	76 2f       	mov	r23, r22
 6e0:	6a 2f       	mov	r22, r26
 6e2:	11 24       	eor	r1, r1
 6e4:	9f 57       	subi	r25, 0x7F	; 127
 6e6:	50 40       	sbci	r21, 0x00	; 0
 6e8:	9a f0       	brmi	.+38     	; 0x710 <__mulsf3_pse+0x88>
 6ea:	f1 f0       	breq	.+60     	; 0x728 <__mulsf3_pse+0xa0>
 6ec:	88 23       	and	r24, r24
 6ee:	4a f0       	brmi	.+18     	; 0x702 <__mulsf3_pse+0x7a>
 6f0:	ee 0f       	add	r30, r30
 6f2:	ff 1f       	adc	r31, r31
 6f4:	bb 1f       	adc	r27, r27
 6f6:	66 1f       	adc	r22, r22
 6f8:	77 1f       	adc	r23, r23
 6fa:	88 1f       	adc	r24, r24
 6fc:	91 50       	subi	r25, 0x01	; 1
 6fe:	50 40       	sbci	r21, 0x00	; 0
 700:	a9 f7       	brne	.-22     	; 0x6ec <__mulsf3_pse+0x64>
 702:	9e 3f       	cpi	r25, 0xFE	; 254
 704:	51 05       	cpc	r21, r1
 706:	80 f0       	brcs	.+32     	; 0x728 <__mulsf3_pse+0xa0>
 708:	0c 94 e0 06 	jmp	0xdc0	; 0xdc0 <__fp_inf>
 70c:	0c 94 da 06 	jmp	0xdb4	; 0xdb4 <__fp_szero>
 710:	5f 3f       	cpi	r21, 0xFF	; 255
 712:	e4 f3       	brlt	.-8      	; 0x70c <__mulsf3_pse+0x84>
 714:	98 3e       	cpi	r25, 0xE8	; 232
 716:	d4 f3       	brlt	.-12     	; 0x70c <__mulsf3_pse+0x84>
 718:	86 95       	lsr	r24
 71a:	77 95       	ror	r23
 71c:	67 95       	ror	r22
 71e:	b7 95       	ror	r27
 720:	f7 95       	ror	r31
 722:	e7 95       	ror	r30
 724:	9f 5f       	subi	r25, 0xFF	; 255
 726:	c1 f7       	brne	.-16     	; 0x718 <__mulsf3_pse+0x90>
 728:	fe 2b       	or	r31, r30
 72a:	88 0f       	add	r24, r24
 72c:	91 1d       	adc	r25, r1
 72e:	96 95       	lsr	r25
 730:	87 95       	ror	r24
 732:	97 f9       	bld	r25, 7
 734:	08 95       	ret

Disassembly of section .text.libgcc:

00000dcc <__tablejump2__>:
 dcc:	ee 0f       	add	r30, r30
 dce:	ff 1f       	adc	r31, r31
 dd0:	05 90       	lpm	r0, Z+
 dd2:	f4 91       	lpm	r31, Z
 dd4:	e0 2d       	mov	r30, r0
 dd6:	09 94       	ijmp
