
BikeRollers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000f26  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000d4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004e  00800100  00800100  00000f26  2**0
                  ALLOC
  3 .comment      0000005b  00000000  00000000  00000f26  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000f81  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001028  00000000  00000000  00001011  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000753  00000000  00000000  00002039  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000682  00000000  00000000  0000278c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001fc  00000000  00000000  00002e10  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000479  00000000  00000000  00003214  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  0000368d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000eae  00000eae  00000f22  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003710  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.pinMode 000000c2  000008f6  000008f6  0000096a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.digitalRead 00000060  00000be0  00000be0  00000c54  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.digitalWrite 00000108  0000056e  0000056e  000005e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__vector_1 00000076  00000b6a  00000b6a  00000bde  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.setPinModes 0000008a  00000a66  00000a66  00000ada  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.setPwmTimers 0000001a  00000df6  00000df6  00000e6a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.setAnalogInputs 00000030  00000d80  00000d80  00000df4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.setSampleTimer 00000024  00000db0  00000db0  00000e24  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.sampleInputs 000001bc  000000d4  000000d4  00000148  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.getTargetCurrent 0000017e  00000290  00000290  00000304  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.updateMotorPID 00000160  0000040e  0000040e  00000482  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.__vector_9 00000056  00000c9e  00000c9e  00000d12  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.updateAnalogInputs 000000ae  000009b8  000009b8  00000a2c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.main    00000018  00000e10  00000e10  00000e84  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.avrlibc.fplib 0000000e  00000e28  00000e28  00000e9c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.avrlibc.fplib 000000ce  00000828  00000828  0000089c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.avrlibc.fplib 0000000a  00000e84  00000e84  00000ef8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.avrlibc.fplib 00000008  00000e98  00000e98  00000f0c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.avrlibc.fplib 000000de  00000676  00000676  000006ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.avrlibc.fplib 0000005e  00000c40  00000c40  00000cb4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.avrlibc.fplib 0000007a  00000af0  00000af0  00000b64  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.avrlibc.fplib 00000048  00000cf4  00000cf4  00000d68  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.avrlibc.fplib 0000000c  00000e60  00000e60  00000ed4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.avrlibc.fplib 00000006  00000ea8  00000ea8  00000f1c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.avrlibc.fplib 0000000e  00000e36  00000e36  00000eaa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.avrlibc.fplib 0000000e  00000e44  00000e44  00000eb8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.avrlibc.fplib 00000022  00000dd4  00000dd4  00000e48  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.avrlibc.fplib 00000044  00000d3c  00000d3c  00000db0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.avrlibc.fplib 0000000e  00000e52  00000e52  00000ec6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.avrlibc.fplib 0000000a  00000e8e  00000e8e  00000f02  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.avrlibc.fplib 00000008  00000ea0  00000ea0  00000f14  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.avrlibc.fplib 000000d4  00000754  00000754  000007c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.libgcc  0000000c  00000e6c  00000e6c  00000ee0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.avrlibc 0000000c  00000e78  00000e78  00000eec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 40 00 	jmp	0x80	; 0x80 <__ctors_end>
   4:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <__vector_1>
   8:	0c 94 57 07 	jmp	0xeae	; 0xeae <__bad_interrupt>
   c:	0c 94 57 07 	jmp	0xeae	; 0xeae <__bad_interrupt>
  10:	0c 94 57 07 	jmp	0xeae	; 0xeae <__bad_interrupt>
  14:	0c 94 57 07 	jmp	0xeae	; 0xeae <__bad_interrupt>
  18:	0c 94 57 07 	jmp	0xeae	; 0xeae <__bad_interrupt>
  1c:	0c 94 57 07 	jmp	0xeae	; 0xeae <__bad_interrupt>
  20:	0c 94 57 07 	jmp	0xeae	; 0xeae <__bad_interrupt>
  24:	0c 94 4f 06 	jmp	0xc9e	; 0xc9e <__vector_9>
  28:	0c 94 57 07 	jmp	0xeae	; 0xeae <__bad_interrupt>
  2c:	0c 94 57 07 	jmp	0xeae	; 0xeae <__bad_interrupt>
  30:	0c 94 57 07 	jmp	0xeae	; 0xeae <__bad_interrupt>
  34:	0c 94 57 07 	jmp	0xeae	; 0xeae <__bad_interrupt>
  38:	0c 94 57 07 	jmp	0xeae	; 0xeae <__bad_interrupt>
  3c:	0c 94 57 07 	jmp	0xeae	; 0xeae <__bad_interrupt>
  40:	0c 94 57 07 	jmp	0xeae	; 0xeae <__bad_interrupt>
  44:	0c 94 57 07 	jmp	0xeae	; 0xeae <__bad_interrupt>
  48:	0c 94 57 07 	jmp	0xeae	; 0xeae <__bad_interrupt>
  4c:	0c 94 57 07 	jmp	0xeae	; 0xeae <__bad_interrupt>
  50:	0c 94 57 07 	jmp	0xeae	; 0xeae <__bad_interrupt>
  54:	0c 94 57 07 	jmp	0xeae	; 0xeae <__bad_interrupt>
  58:	0c 94 57 07 	jmp	0xeae	; 0xeae <__bad_interrupt>
  5c:	0c 94 57 07 	jmp	0xeae	; 0xeae <__bad_interrupt>
  60:	0c 94 57 07 	jmp	0xeae	; 0xeae <__bad_interrupt>
  64:	0c 94 57 07 	jmp	0xeae	; 0xeae <__bad_interrupt>
  68:	ec 04       	cpc	r14, r12
  6a:	f4 04       	cpc	r15, r4
  6c:	fc 04       	cpc	r15, r12
  6e:	04 05       	cpc	r16, r4
  70:	0c 05       	cpc	r16, r12
  72:	23 05       	cpc	r18, r3
  74:	23 05       	cpc	r18, r3
  76:	14 05       	cpc	r17, r4
  78:	1c 05       	cpc	r17, r12

0000007a <.dinit>:
  7a:	01 00       	.word	0x0001	; ????
  7c:	01 4e       	sbci	r16, 0xE1	; 225
  7e:	80 00       	.word	0x0080	; ????

00000080 <__ctors_end>:
  80:	11 24       	eor	r1, r1
  82:	1f be       	out	0x3f, r1	; 63
  84:	cf ef       	ldi	r28, 0xFF	; 255
  86:	d8 e0       	ldi	r29, 0x08	; 8
  88:	de bf       	out	0x3e, r29	; 62
  8a:	cd bf       	out	0x3d, r28	; 61

0000008c <__do_copy_data>:
  8c:	ea e7       	ldi	r30, 0x7A	; 122
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	40 e0       	ldi	r20, 0x00	; 0
  92:	17 c0       	rjmp	.+46     	; 0xc2 <__do_clear_bss+0x8>
  94:	b5 91       	lpm	r27, Z+
  96:	a5 91       	lpm	r26, Z+
  98:	35 91       	lpm	r19, Z+
  9a:	25 91       	lpm	r18, Z+
  9c:	05 91       	lpm	r16, Z+
  9e:	07 fd       	sbrc	r16, 7
  a0:	0c c0       	rjmp	.+24     	; 0xba <__do_clear_bss>
  a2:	95 91       	lpm	r25, Z+
  a4:	85 91       	lpm	r24, Z+
  a6:	ef 01       	movw	r28, r30
  a8:	f9 2f       	mov	r31, r25
  aa:	e8 2f       	mov	r30, r24
  ac:	05 90       	lpm	r0, Z+
  ae:	0d 92       	st	X+, r0
  b0:	a2 17       	cp	r26, r18
  b2:	b3 07       	cpc	r27, r19
  b4:	d9 f7       	brne	.-10     	; 0xac <__do_copy_data+0x20>
  b6:	fe 01       	movw	r30, r28
  b8:	04 c0       	rjmp	.+8      	; 0xc2 <__do_clear_bss+0x8>

000000ba <__do_clear_bss>:
  ba:	1d 92       	st	X+, r1
  bc:	a2 17       	cp	r26, r18
  be:	b3 07       	cpc	r27, r19
  c0:	e1 f7       	brne	.-8      	; 0xba <__do_clear_bss>
  c2:	ef 37       	cpi	r30, 0x7F	; 127
  c4:	f4 07       	cpc	r31, r20
  c6:	31 f7       	brne	.-52     	; 0x94 <__do_copy_data+0x8>
  c8:	0e 94 08 07 	call	0xe10	; 0xe10 <main>
  cc:	0c 94 68 00 	jmp	0xd0	; 0xd0 <_exit>

000000d0 <_exit>:
  d0:	f8 94       	cli

000000d2 <__stop_program>:
  d2:	ff cf       	rjmp	.-2      	; 0xd2 <__stop_program>

Disassembly of section .text:

00000eae <__bad_interrupt>:
 eae:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.pinMode:

000008f6 <pinMode>:
		digitalWrite(MOTOR_REV, 1);
		digitalWrite(MOTOR_FWD, 1);
	}
}

void updateResistorPID(){
 8f6:	83 34       	cpi	r24, 0x43	; 67
 8f8:	21 f1       	breq	.+72     	; 0x942 <__stack+0x43>
 8fa:	84 34       	cpi	r24, 0x44	; 68
 8fc:	09 f4       	brne	.+2      	; 0x900 <__stack+0x1>
 8fe:	3f c0       	rjmp	.+126    	; 0x97e <__stack+0x7f>
 900:	82 34       	cpi	r24, 0x42	; 66
 902:	09 f0       	breq	.+2      	; 0x906 <__stack+0x7>
 904:	58 c0       	rjmp	.+176    	; 0x9b6 <__stack+0xb7>
 906:	43 30       	cpi	r20, 0x03	; 3
 908:	51 05       	cpc	r21, r1
 90a:	69 f4       	brne	.+26     	; 0x926 <__stack+0x27>
 90c:	24 b1       	in	r18, 0x04	; 4
 90e:	81 e0       	ldi	r24, 0x01	; 1
 910:	90 e0       	ldi	r25, 0x00	; 0
 912:	06 2e       	mov	r0, r22
 914:	02 c0       	rjmp	.+4      	; 0x91a <__stack+0x1b>
 916:	88 0f       	add	r24, r24
 918:	99 1f       	adc	r25, r25
 91a:	0a 94       	dec	r0
 91c:	e2 f7       	brpl	.-8      	; 0x916 <__stack+0x17>
 91e:	80 95       	com	r24
 920:	82 23       	and	r24, r18
 922:	84 b9       	out	0x04, r24	; 4
 924:	0e c0       	rjmp	.+28     	; 0x942 <__stack+0x43>
 926:	44 30       	cpi	r20, 0x04	; 4
 928:	51 05       	cpc	r21, r1
 92a:	59 f4       	brne	.+22     	; 0x942 <__stack+0x43>
 92c:	24 b1       	in	r18, 0x04	; 4
 92e:	81 e0       	ldi	r24, 0x01	; 1
 930:	90 e0       	ldi	r25, 0x00	; 0
 932:	06 2e       	mov	r0, r22
 934:	02 c0       	rjmp	.+4      	; 0x93a <__stack+0x3b>
 936:	88 0f       	add	r24, r24
 938:	99 1f       	adc	r25, r25
 93a:	0a 94       	dec	r0
 93c:	e2 f7       	brpl	.-8      	; 0x936 <__stack+0x37>
 93e:	82 2b       	or	r24, r18
 940:	84 b9       	out	0x04, r24	; 4
 942:	43 30       	cpi	r20, 0x03	; 3
 944:	51 05       	cpc	r21, r1
 946:	69 f4       	brne	.+26     	; 0x962 <__stack+0x63>
 948:	27 b1       	in	r18, 0x07	; 7
 94a:	81 e0       	ldi	r24, 0x01	; 1
 94c:	90 e0       	ldi	r25, 0x00	; 0
 94e:	06 2e       	mov	r0, r22
 950:	02 c0       	rjmp	.+4      	; 0x956 <__stack+0x57>
 952:	88 0f       	add	r24, r24
 954:	99 1f       	adc	r25, r25
 956:	0a 94       	dec	r0
 958:	e2 f7       	brpl	.-8      	; 0x952 <__stack+0x53>
 95a:	80 95       	com	r24
 95c:	82 23       	and	r24, r18
 95e:	87 b9       	out	0x07, r24	; 7
 960:	0e c0       	rjmp	.+28     	; 0x97e <__stack+0x7f>
 962:	44 30       	cpi	r20, 0x04	; 4
 964:	51 05       	cpc	r21, r1
 966:	59 f4       	brne	.+22     	; 0x97e <__stack+0x7f>
 968:	27 b1       	in	r18, 0x07	; 7
 96a:	81 e0       	ldi	r24, 0x01	; 1
 96c:	90 e0       	ldi	r25, 0x00	; 0
 96e:	06 2e       	mov	r0, r22
 970:	02 c0       	rjmp	.+4      	; 0x976 <__stack+0x77>
 972:	88 0f       	add	r24, r24
 974:	99 1f       	adc	r25, r25
 976:	0a 94       	dec	r0
 978:	e2 f7       	brpl	.-8      	; 0x972 <__stack+0x73>
 97a:	82 2b       	or	r24, r18
 97c:	87 b9       	out	0x07, r24	; 7
 97e:	43 30       	cpi	r20, 0x03	; 3
 980:	51 05       	cpc	r21, r1
 982:	61 f4       	brne	.+24     	; 0x99c <__stack+0x9d>
 984:	2a b1       	in	r18, 0x0a	; 10
 986:	81 e0       	ldi	r24, 0x01	; 1
 988:	90 e0       	ldi	r25, 0x00	; 0
 98a:	02 c0       	rjmp	.+4      	; 0x990 <__stack+0x91>
 98c:	88 0f       	add	r24, r24
 98e:	99 1f       	adc	r25, r25
 990:	6a 95       	dec	r22
 992:	e2 f7       	brpl	.-8      	; 0x98c <__stack+0x8d>
 994:	80 95       	com	r24
 996:	82 23       	and	r24, r18
 998:	8a b9       	out	0x0a, r24	; 10
 99a:	08 95       	ret
 99c:	44 30       	cpi	r20, 0x04	; 4
 99e:	51 05       	cpc	r21, r1
 9a0:	51 f4       	brne	.+20     	; 0x9b6 <__stack+0xb7>
 9a2:	2a b1       	in	r18, 0x0a	; 10
 9a4:	81 e0       	ldi	r24, 0x01	; 1
 9a6:	90 e0       	ldi	r25, 0x00	; 0
 9a8:	02 c0       	rjmp	.+4      	; 0x9ae <__stack+0xaf>
 9aa:	88 0f       	add	r24, r24
 9ac:	99 1f       	adc	r25, r25
 9ae:	6a 95       	dec	r22
 9b0:	e2 f7       	brpl	.-8      	; 0x9aa <__stack+0xab>
 9b2:	82 2b       	or	r24, r18
 9b4:	8a b9       	out	0x0a, r24	; 10
 9b6:	08 95       	ret

Disassembly of section .text.digitalRead:

00000be0 <digitalRead>:
			return;
	}
}

int digitalRead(char port, uint8_t pin) {
	switch (port) {
 be0:	83 34       	cpi	r24, 0x43	; 67
 be2:	89 f0       	breq	.+34     	; 0xc06 <digitalRead+0x26>
 be4:	84 34       	cpi	r24, 0x44	; 68
 be6:	e1 f0       	breq	.+56     	; 0xc20 <digitalRead+0x40>
 be8:	82 34       	cpi	r24, 0x42	; 66
 bea:	39 f5       	brne	.+78     	; 0xc3a <digitalRead+0x5a>
		case 'B':
			return PINB & (1 << pin);
 bec:	83 b1       	in	r24, 0x03	; 3
 bee:	28 2f       	mov	r18, r24
 bf0:	30 e0       	ldi	r19, 0x00	; 0
 bf2:	81 e0       	ldi	r24, 0x01	; 1
 bf4:	90 e0       	ldi	r25, 0x00	; 0
 bf6:	02 c0       	rjmp	.+4      	; 0xbfc <digitalRead+0x1c>
 bf8:	88 0f       	add	r24, r24
 bfa:	99 1f       	adc	r25, r25
 bfc:	6a 95       	dec	r22
 bfe:	e2 f7       	brpl	.-8      	; 0xbf8 <digitalRead+0x18>
 c00:	82 23       	and	r24, r18
 c02:	93 23       	and	r25, r19
 c04:	08 95       	ret
		case 'C':
			return PINC & (1 << pin);
 c06:	86 b1       	in	r24, 0x06	; 6
 c08:	28 2f       	mov	r18, r24
 c0a:	30 e0       	ldi	r19, 0x00	; 0
 c0c:	81 e0       	ldi	r24, 0x01	; 1
 c0e:	90 e0       	ldi	r25, 0x00	; 0
 c10:	02 c0       	rjmp	.+4      	; 0xc16 <digitalRead+0x36>
 c12:	88 0f       	add	r24, r24
 c14:	99 1f       	adc	r25, r25
 c16:	6a 95       	dec	r22
 c18:	e2 f7       	brpl	.-8      	; 0xc12 <digitalRead+0x32>
 c1a:	82 23       	and	r24, r18
 c1c:	93 23       	and	r25, r19
 c1e:	08 95       	ret
		case 'D':
			return PIND & (1 << pin);
 c20:	89 b1       	in	r24, 0x09	; 9
 c22:	28 2f       	mov	r18, r24
 c24:	30 e0       	ldi	r19, 0x00	; 0
 c26:	81 e0       	ldi	r24, 0x01	; 1
 c28:	90 e0       	ldi	r25, 0x00	; 0
 c2a:	02 c0       	rjmp	.+4      	; 0xc30 <digitalRead+0x50>
 c2c:	88 0f       	add	r24, r24
 c2e:	99 1f       	adc	r25, r25
 c30:	6a 95       	dec	r22
 c32:	e2 f7       	brpl	.-8      	; 0xc2c <digitalRead+0x4c>
 c34:	82 23       	and	r24, r18
 c36:	93 23       	and	r25, r19
 c38:	08 95       	ret
		default:
			return 0;
 c3a:	80 e0       	ldi	r24, 0x00	; 0
 c3c:	90 e0       	ldi	r25, 0x00	; 0
	}
}
 c3e:	08 95       	ret

Disassembly of section .text.digitalWrite:

0000056e <digitalWrite>:
 56e:	83 34       	cpi	r24, 0x43	; 67
 570:	81 f1       	breq	.+96     	; 0x5d2 <digitalWrite+0x64>
 572:	84 34       	cpi	r24, 0x44	; 68
 574:	09 f4       	brne	.+2      	; 0x578 <digitalWrite+0xa>
 576:	57 c0       	rjmp	.+174    	; 0x626 <digitalWrite+0xb8>
 578:	82 34       	cpi	r24, 0x42	; 66
 57a:	09 f0       	breq	.+2      	; 0x57e <digitalWrite+0x10>
 57c:	7b c0       	rjmp	.+246    	; 0x674 <digitalWrite+0x106>
 57e:	41 30       	cpi	r20, 0x01	; 1
 580:	51 05       	cpc	r21, r1
 582:	61 f4       	brne	.+24     	; 0x59c <digitalWrite+0x2e>
 584:	25 b1       	in	r18, 0x05	; 5
 586:	81 e0       	ldi	r24, 0x01	; 1
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	06 2e       	mov	r0, r22
 58c:	02 c0       	rjmp	.+4      	; 0x592 <digitalWrite+0x24>
 58e:	88 0f       	add	r24, r24
 590:	99 1f       	adc	r25, r25
 592:	0a 94       	dec	r0
 594:	e2 f7       	brpl	.-8      	; 0x58e <digitalWrite+0x20>
 596:	82 2b       	or	r24, r18
 598:	85 b9       	out	0x05, r24	; 5
 59a:	1b c0       	rjmp	.+54     	; 0x5d2 <digitalWrite+0x64>
 59c:	42 30       	cpi	r20, 0x02	; 2
 59e:	51 05       	cpc	r21, r1
 5a0:	61 f4       	brne	.+24     	; 0x5ba <digitalWrite+0x4c>
 5a2:	25 b1       	in	r18, 0x05	; 5
 5a4:	81 e0       	ldi	r24, 0x01	; 1
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	06 2e       	mov	r0, r22
 5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <digitalWrite+0x42>
 5ac:	88 0f       	add	r24, r24
 5ae:	99 1f       	adc	r25, r25
 5b0:	0a 94       	dec	r0
 5b2:	e2 f7       	brpl	.-8      	; 0x5ac <digitalWrite+0x3e>
 5b4:	82 27       	eor	r24, r18
 5b6:	85 b9       	out	0x05, r24	; 5
 5b8:	0c c0       	rjmp	.+24     	; 0x5d2 <digitalWrite+0x64>
 5ba:	25 b1       	in	r18, 0x05	; 5
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	06 2e       	mov	r0, r22
 5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <digitalWrite+0x5a>
 5c4:	88 0f       	add	r24, r24
 5c6:	99 1f       	adc	r25, r25
 5c8:	0a 94       	dec	r0
 5ca:	e2 f7       	brpl	.-8      	; 0x5c4 <digitalWrite+0x56>
 5cc:	80 95       	com	r24
 5ce:	82 23       	and	r24, r18
 5d0:	85 b9       	out	0x05, r24	; 5
 5d2:	41 30       	cpi	r20, 0x01	; 1
 5d4:	51 05       	cpc	r21, r1
 5d6:	61 f4       	brne	.+24     	; 0x5f0 <digitalWrite+0x82>
 5d8:	28 b1       	in	r18, 0x08	; 8
 5da:	81 e0       	ldi	r24, 0x01	; 1
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	06 2e       	mov	r0, r22
 5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <digitalWrite+0x78>
 5e2:	88 0f       	add	r24, r24
 5e4:	99 1f       	adc	r25, r25
 5e6:	0a 94       	dec	r0
 5e8:	e2 f7       	brpl	.-8      	; 0x5e2 <digitalWrite+0x74>
 5ea:	82 2b       	or	r24, r18
 5ec:	88 b9       	out	0x08, r24	; 8
 5ee:	1b c0       	rjmp	.+54     	; 0x626 <digitalWrite+0xb8>
 5f0:	42 30       	cpi	r20, 0x02	; 2
 5f2:	51 05       	cpc	r21, r1
 5f4:	61 f4       	brne	.+24     	; 0x60e <digitalWrite+0xa0>
 5f6:	28 b1       	in	r18, 0x08	; 8
 5f8:	81 e0       	ldi	r24, 0x01	; 1
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	06 2e       	mov	r0, r22
 5fe:	02 c0       	rjmp	.+4      	; 0x604 <digitalWrite+0x96>
 600:	88 0f       	add	r24, r24
 602:	99 1f       	adc	r25, r25
 604:	0a 94       	dec	r0
 606:	e2 f7       	brpl	.-8      	; 0x600 <digitalWrite+0x92>
 608:	82 27       	eor	r24, r18
 60a:	88 b9       	out	0x08, r24	; 8
 60c:	0c c0       	rjmp	.+24     	; 0x626 <digitalWrite+0xb8>
 60e:	28 b1       	in	r18, 0x08	; 8
 610:	81 e0       	ldi	r24, 0x01	; 1
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	06 2e       	mov	r0, r22
 616:	02 c0       	rjmp	.+4      	; 0x61c <digitalWrite+0xae>
 618:	88 0f       	add	r24, r24
 61a:	99 1f       	adc	r25, r25
 61c:	0a 94       	dec	r0
 61e:	e2 f7       	brpl	.-8      	; 0x618 <digitalWrite+0xaa>
 620:	80 95       	com	r24
 622:	82 23       	and	r24, r18
 624:	88 b9       	out	0x08, r24	; 8
 626:	41 30       	cpi	r20, 0x01	; 1
 628:	51 05       	cpc	r21, r1
 62a:	59 f4       	brne	.+22     	; 0x642 <digitalWrite+0xd4>
 62c:	2b b1       	in	r18, 0x0b	; 11
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	02 c0       	rjmp	.+4      	; 0x638 <digitalWrite+0xca>
 634:	88 0f       	add	r24, r24
 636:	99 1f       	adc	r25, r25
 638:	6a 95       	dec	r22
 63a:	e2 f7       	brpl	.-8      	; 0x634 <digitalWrite+0xc6>
 63c:	82 2b       	or	r24, r18
 63e:	8b b9       	out	0x0b, r24	; 11
 640:	08 95       	ret
 642:	42 30       	cpi	r20, 0x02	; 2
 644:	51 05       	cpc	r21, r1
 646:	59 f4       	brne	.+22     	; 0x65e <digitalWrite+0xf0>
 648:	2b b1       	in	r18, 0x0b	; 11
 64a:	81 e0       	ldi	r24, 0x01	; 1
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	02 c0       	rjmp	.+4      	; 0x654 <digitalWrite+0xe6>
 650:	88 0f       	add	r24, r24
 652:	99 1f       	adc	r25, r25
 654:	6a 95       	dec	r22
 656:	e2 f7       	brpl	.-8      	; 0x650 <digitalWrite+0xe2>
 658:	82 27       	eor	r24, r18
 65a:	8b b9       	out	0x0b, r24	; 11
 65c:	08 95       	ret
 65e:	2b b1       	in	r18, 0x0b	; 11
 660:	81 e0       	ldi	r24, 0x01	; 1
 662:	90 e0       	ldi	r25, 0x00	; 0
 664:	02 c0       	rjmp	.+4      	; 0x66a <digitalWrite+0xfc>
 666:	88 0f       	add	r24, r24
 668:	99 1f       	adc	r25, r25
 66a:	6a 95       	dec	r22
 66c:	e2 f7       	brpl	.-8      	; 0x666 <digitalWrite+0xf8>
 66e:	80 95       	com	r24
 670:	82 23       	and	r24, r18
 672:	8b b9       	out	0x0b, r24	; 11
 674:	08 95       	ret

Disassembly of section .text.__vector_1:

00000b6a <__vector_1>:
	getTargetCurrent();	
	updateMotorPID();
	updateResistorPID();
}

ISR (INT0_vect) {
 b6a:	1f 92       	push	r1
 b6c:	0f 92       	push	r0
 b6e:	0f b6       	in	r0, 0x3f	; 63
 b70:	0f 92       	push	r0
 b72:	11 24       	eor	r1, r1
 b74:	2f 93       	push	r18
 b76:	3f 93       	push	r19
 b78:	4f 93       	push	r20
 b7a:	5f 93       	push	r21
 b7c:	6f 93       	push	r22
 b7e:	7f 93       	push	r23
 b80:	8f 93       	push	r24
 b82:	9f 93       	push	r25
 b84:	af 93       	push	r26
 b86:	bf 93       	push	r27
 b88:	ef 93       	push	r30
 b8a:	ff 93       	push	r31
	if (digitalRead(MOTOR_ENC_A)) {
 b8c:	63 e0       	ldi	r22, 0x03	; 3
 b8e:	84 e4       	ldi	r24, 0x44	; 68
 b90:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <digitalRead>
 b94:	89 2b       	or	r24, r25
 b96:	51 f0       	breq	.+20     	; 0xbac <__vector_1+0x42>
		iEncoderPos += 1;
 b98:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <iEncoderPos>
 b9c:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <iEncoderPos+0x1>
 ba0:	01 96       	adiw	r24, 0x01	; 1
 ba2:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <iEncoderPos+0x1>
 ba6:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <iEncoderPos>
 baa:	09 c0       	rjmp	.+18     	; 0xbbe <__vector_1+0x54>
	} else {
		iEncoderPos -= 1;
 bac:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <iEncoderPos>
 bb0:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <iEncoderPos+0x1>
 bb4:	01 97       	sbiw	r24, 0x01	; 1
 bb6:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <iEncoderPos+0x1>
 bba:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <iEncoderPos>
	}
}
 bbe:	ff 91       	pop	r31
 bc0:	ef 91       	pop	r30
 bc2:	bf 91       	pop	r27
 bc4:	af 91       	pop	r26
 bc6:	9f 91       	pop	r25
 bc8:	8f 91       	pop	r24
 bca:	7f 91       	pop	r23
 bcc:	6f 91       	pop	r22
 bce:	5f 91       	pop	r21
 bd0:	4f 91       	pop	r20
 bd2:	3f 91       	pop	r19
 bd4:	2f 91       	pop	r18
 bd6:	0f 90       	pop	r0
 bd8:	0f be       	out	0x3f, r0	; 63
 bda:	0f 90       	pop	r0
 bdc:	1f 90       	pop	r1
 bde:	18 95       	reti

Disassembly of section .text.setPinModes:

00000a66 <setPinModes>:
		- Watchdog timer restarts cycle
	*/
}

void setPinModes() {
	EICRA = EICRA & 0b11111100 | 0b00000011; // Rising edge triggers an interrupt for INT0
 a66:	e9 e6       	ldi	r30, 0x69	; 105
 a68:	f0 e0       	ldi	r31, 0x00	; 0
 a6a:	80 81       	ld	r24, Z
 a6c:	83 60       	ori	r24, 0x03	; 3
 a6e:	80 83       	st	Z, r24
	EIMSK = EIMSK & 0b11111110 | 0b00000001; // Enable INT0 interrupt	
 a70:	8d b3       	in	r24, 0x1d	; 29
 a72:	81 60       	ori	r24, 0x01	; 1
 a74:	8d bb       	out	0x1d, r24	; 29
	
	pinMode(BATT_V_REF, INPUT);
 a76:	43 e0       	ldi	r20, 0x03	; 3
 a78:	50 e0       	ldi	r21, 0x00	; 0
 a7a:	64 e0       	ldi	r22, 0x04	; 4
 a7c:	83 e4       	ldi	r24, 0x43	; 67
 a7e:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <pinMode>
	pinMode(BATT_TEMP, INPUT);
 a82:	43 e0       	ldi	r20, 0x03	; 3
 a84:	50 e0       	ldi	r21, 0x00	; 0
 a86:	62 e0       	ldi	r22, 0x02	; 2
 a88:	83 e4       	ldi	r24, 0x43	; 67
 a8a:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <pinMode>
	pinMode(MOT_I_REF, INPUT);
 a8e:	43 e0       	ldi	r20, 0x03	; 3
 a90:	50 e0       	ldi	r21, 0x00	; 0
 a92:	63 e0       	ldi	r22, 0x03	; 3
 a94:	83 e4       	ldi	r24, 0x43	; 67
 a96:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <pinMode>

	pinMode(POT_FRICTION, INPUT);
 a9a:	43 e0       	ldi	r20, 0x03	; 3
 a9c:	50 e0       	ldi	r21, 0x00	; 0
 a9e:	61 e0       	ldi	r22, 0x01	; 1
 aa0:	83 e4       	ldi	r24, 0x43	; 67
 aa2:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <pinMode>
	pinMode(POT_SLOPE, INPUT);
 aa6:	43 e0       	ldi	r20, 0x03	; 3
 aa8:	50 e0       	ldi	r21, 0x00	; 0
 aaa:	60 e0       	ldi	r22, 0x00	; 0
 aac:	83 e4       	ldi	r24, 0x43	; 67
 aae:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <pinMode>
	pinMode(POT_MOMENTUM, INPUT);
 ab2:	43 e0       	ldi	r20, 0x03	; 3
 ab4:	50 e0       	ldi	r21, 0x00	; 0
 ab6:	67 e0       	ldi	r22, 0x07	; 7
 ab8:	83 e4       	ldi	r24, 0x43	; 67
 aba:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <pinMode>

	pinMode(SW_AUTO_MAN, INPUT);
 abe:	43 e0       	ldi	r20, 0x03	; 3
 ac0:	50 e0       	ldi	r21, 0x00	; 0
 ac2:	67 e0       	ldi	r22, 0x07	; 7
 ac4:	84 e4       	ldi	r24, 0x44	; 68
 ac6:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <pinMode>

	//pinMode(EXT_STATUS_LT, OUTPUT);
	//pinMode(EXT_ERROR_LT, OUTPUT);
	
	pinMode(MOTOR_ENC_A, INPUT);
 aca:	43 e0       	ldi	r20, 0x03	; 3
 acc:	50 e0       	ldi	r21, 0x00	; 0
 ace:	63 e0       	ldi	r22, 0x03	; 3
 ad0:	84 e4       	ldi	r24, 0x44	; 68
 ad2:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <pinMode>
	pinMode(MOTOR_ENC_B, INPUT);	
 ad6:	43 e0       	ldi	r20, 0x03	; 3
 ad8:	50 e0       	ldi	r21, 0x00	; 0
 ada:	62 e0       	ldi	r22, 0x02	; 2
 adc:	84 e4       	ldi	r24, 0x44	; 68
 ade:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <pinMode>

	//pinMode(MOTOR_FWD, OUTPUT);
	//pinMode(MOTOR_REV, OUTPUT);
	//pinMode(MOTOR_PWM, OUTPUT);
	
	DDRD |= (1 << PIND0) | (1 << PIND1) | (1 << PIND4) | (1 << PIND5) | (1 << PIND6);
 ae2:	8a b1       	in	r24, 0x0a	; 10
 ae4:	83 67       	ori	r24, 0x73	; 115
 ae6:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (1 << PINB0) | (1 << PINB1) | (1 << PINB2);	
 ae8:	84 b1       	in	r24, 0x04	; 4
 aea:	87 60       	ori	r24, 0x07	; 7
 aec:	84 b9       	out	0x04, r24	; 4
 aee:	08 95       	ret

Disassembly of section .text.setPwmTimers:

00000df6 <setPwmTimers>:
}

void setPwmTimers(){
	// TCCR1A - Timer/Counter1 Control Registers
	TCCR1A = TCCR1A & 0b00001100 | 0b10100001; // Clear OC1A/OC1B on compare match, Fast PWM, 8-bit
 df6:	e0 e8       	ldi	r30, 0x80	; 128
 df8:	f0 e0       	ldi	r31, 0x00	; 0
 dfa:	80 81       	ld	r24, Z
 dfc:	8c 70       	andi	r24, 0x0C	; 12
 dfe:	81 6a       	ori	r24, 0xA1	; 161
 e00:	80 83       	st	Z, r24
	TCCR1B = TCCR1B & 0b11100000 | 0b00001010; // Fast PWM, 8-bit, no prescaling (31.3 kHz base)
 e02:	e1 e8       	ldi	r30, 0x81	; 129
 e04:	f0 e0       	ldi	r31, 0x00	; 0
 e06:	80 81       	ld	r24, Z
 e08:	80 7e       	andi	r24, 0xE0	; 224
 e0a:	8a 60       	ori	r24, 0x0A	; 10
 e0c:	80 83       	st	Z, r24
 e0e:	08 95       	ret

Disassembly of section .text.setAnalogInputs:

00000d80 <setAnalogInputs>:
}

void setAnalogInputs(){
	// Analog read setup
	DIDR0 |= 0b00111111;
 d80:	ee e7       	ldi	r30, 0x7E	; 126
 d82:	f0 e0       	ldi	r31, 0x00	; 0
 d84:	80 81       	ld	r24, Z
 d86:	8f 63       	ori	r24, 0x3F	; 63
 d88:	80 83       	st	Z, r24
	ADMUX = ADMUX & 0b00011111 | 0b01100000;	// Voltage reference from AVcc with capacitor at AREF. Left adjust ADCL and ADCH. Read only ADCH for 8-bit value.
 d8a:	ec e7       	ldi	r30, 0x7C	; 124
 d8c:	f0 e0       	ldi	r31, 0x00	; 0
 d8e:	80 81       	ld	r24, Z
 d90:	8f 71       	andi	r24, 0x1F	; 31
 d92:	80 66       	ori	r24, 0x60	; 96
 d94:	80 83       	st	Z, r24
	ADCSRA = ADCSRA & 0b00111000 | 0b10000100;	// Enable ADC converter and set prescaler to 16
 d96:	ea e7       	ldi	r30, 0x7A	; 122
 d98:	f0 e0       	ldi	r31, 0x00	; 0
 d9a:	80 81       	ld	r24, Z
 d9c:	88 73       	andi	r24, 0x38	; 56
 d9e:	84 68       	ori	r24, 0x84	; 132
 da0:	80 83       	st	Z, r24
	ADCSRB = ADCSRB & 0b11111000 | 0b00000100;
 da2:	eb e7       	ldi	r30, 0x7B	; 123
 da4:	f0 e0       	ldi	r31, 0x00	; 0
 da6:	80 81       	ld	r24, Z
 da8:	88 7f       	andi	r24, 0xF8	; 248
 daa:	84 60       	ori	r24, 0x04	; 4
 dac:	80 83       	st	Z, r24
 dae:	08 95       	ret

Disassembly of section .text.setSampleTimer:

00000db0 <setSampleTimer>:
}

void setSampleTimer(){
	TCCR2A = TCCR2A & 0b00001100 | 0b00000011;	// Fast PWM, no output
 db0:	e0 eb       	ldi	r30, 0xB0	; 176
 db2:	f0 e0       	ldi	r31, 0x00	; 0
 db4:	80 81       	ld	r24, Z
 db6:	8c 70       	andi	r24, 0x0C	; 12
 db8:	83 60       	ori	r24, 0x03	; 3
 dba:	80 83       	st	Z, r24
	TCCR2B = TCCR2A & 0b11110000 | 0b00000111;	// Fast PWM, clk/1024
 dbc:	80 81       	ld	r24, Z
 dbe:	80 7f       	andi	r24, 0xF0	; 240
 dc0:	87 60       	ori	r24, 0x07	; 7
 dc2:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	TCNT2 = 99;	// 100 Hz sampling
 dc6:	83 e6       	ldi	r24, 0x63	; 99
 dc8:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
	TIMSK2 = (1 << TOIE2);
 dcc:	81 e0       	ldi	r24, 0x01	; 1
 dce:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
 dd2:	08 95       	ret

Disassembly of section .text.sampleInputs:

000000d4 <sampleInputs>:
		digitalWrite(MOTOR_REV, 1);
		digitalWrite(MOTOR_FWD, 1);
	}
}

void updateResistorPID(){
  d4:	ef 92       	push	r14
  d6:	ff 92       	push	r15
  d8:	0f 93       	push	r16
  da:	1f 93       	push	r17
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	e0 90 03 01 	lds	r14, 0x0103	; 0x800103 <motorDataPointer>
  e4:	0e 2d       	mov	r16, r14
  e6:	10 e0       	ldi	r17, 0x00	; 0
  e8:	e8 01       	movw	r28, r16
  ea:	cc 0f       	add	r28, r28
  ec:	dd 1f       	adc	r29, r29
  ee:	c0 0f       	add	r28, r16
  f0:	d1 1f       	adc	r29, r17
  f2:	cc 0f       	add	r28, r28
  f4:	dd 1f       	adc	r29, r29
  f6:	cc 0f       	add	r28, r28
  f8:	dd 1f       	adc	r29, r29
  fa:	c5 5f       	subi	r28, 0xF5	; 245
  fc:	de 4f       	sbci	r29, 0xFE	; 254
  fe:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <iEncoderPos>
 102:	70 91 06 01 	lds	r23, 0x0106	; 0x800106 <iEncoderPos+0x1>
 106:	07 2e       	mov	r0, r23
 108:	00 0c       	add	r0, r0
 10a:	88 0b       	sbc	r24, r24
 10c:	99 0b       	sbc	r25, r25
 10e:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__floatsisf>
 112:	68 83       	st	Y, r22
 114:	79 83       	std	Y+1, r23	; 0x01
 116:	8a 83       	std	Y+2, r24	; 0x02
 118:	9b 83       	std	Y+3, r25	; 0x03
 11a:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <iEncoderPos+0x1>
 11e:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <iEncoderPos>
 122:	1c 82       	std	Y+4, r1	; 0x04
 124:	1d 82       	std	Y+5, r1	; 0x05
 126:	1e 82       	std	Y+6, r1	; 0x06
 128:	1f 82       	std	Y+7, r1	; 0x07
 12a:	f1 2c       	mov	r15, r1
 12c:	27 c0       	rjmp	.+78     	; 0x17c <sampleInputs+0xa8>
 12e:	8f 2d       	mov	r24, r15
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	fc 01       	movw	r30, r24
 134:	ee 0f       	add	r30, r30
 136:	ff 1f       	adc	r31, r31
 138:	e8 0f       	add	r30, r24
 13a:	f9 1f       	adc	r31, r25
 13c:	ee 0f       	add	r30, r30
 13e:	ff 1f       	adc	r31, r31
 140:	ee 0f       	add	r30, r30
 142:	ff 1f       	adc	r31, r31
 144:	e5 5f       	subi	r30, 0xF5	; 245
 146:	fe 4f       	sbci	r31, 0xFE	; 254
 148:	20 81       	ld	r18, Z
 14a:	31 81       	ldd	r19, Z+1	; 0x01
 14c:	42 81       	ldd	r20, Z+2	; 0x02
 14e:	53 81       	ldd	r21, Z+3	; 0x03
 150:	e8 01       	movw	r28, r16
 152:	cc 0f       	add	r28, r28
 154:	dd 1f       	adc	r29, r29
 156:	c0 0f       	add	r28, r16
 158:	d1 1f       	adc	r29, r17
 15a:	cc 0f       	add	r28, r28
 15c:	dd 1f       	adc	r29, r29
 15e:	cc 0f       	add	r28, r28
 160:	dd 1f       	adc	r29, r29
 162:	c5 5f       	subi	r28, 0xF5	; 245
 164:	de 4f       	sbci	r29, 0xFE	; 254
 166:	6c 81       	ldd	r22, Y+4	; 0x04
 168:	7d 81       	ldd	r23, Y+5	; 0x05
 16a:	8e 81       	ldd	r24, Y+6	; 0x06
 16c:	9f 81       	ldd	r25, Y+7	; 0x07
 16e:	0e 94 15 07 	call	0xe2a	; 0xe2a <__addsf3>
 172:	6c 83       	std	Y+4, r22	; 0x04
 174:	7d 83       	std	Y+5, r23	; 0x05
 176:	8e 83       	std	Y+6, r24	; 0x06
 178:	9f 83       	std	Y+7, r25	; 0x07
 17a:	f3 94       	inc	r15
 17c:	24 e0       	ldi	r18, 0x04	; 4
 17e:	2f 15       	cp	r18, r15
 180:	b0 f6       	brcc	.-84     	; 0x12e <sampleInputs+0x5a>
 182:	e8 01       	movw	r28, r16
 184:	cc 0f       	add	r28, r28
 186:	dd 1f       	adc	r29, r29
 188:	c0 0f       	add	r28, r16
 18a:	d1 1f       	adc	r29, r17
 18c:	cc 0f       	add	r28, r28
 18e:	dd 1f       	adc	r29, r29
 190:	cc 0f       	add	r28, r28
 192:	dd 1f       	adc	r29, r29
 194:	c5 5f       	subi	r28, 0xF5	; 245
 196:	de 4f       	sbci	r29, 0xFE	; 254
 198:	20 e0       	ldi	r18, 0x00	; 0
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	40 ea       	ldi	r20, 0xA0	; 160
 19e:	50 e4       	ldi	r21, 0x40	; 64
 1a0:	6c 81       	ldd	r22, Y+4	; 0x04
 1a2:	7d 81       	ldd	r23, Y+5	; 0x05
 1a4:	8e 81       	ldd	r24, Y+6	; 0x06
 1a6:	9f 81       	ldd	r25, Y+7	; 0x07
 1a8:	0e 94 4c 07 	call	0xe98	; 0xe98 <__divsf3>
 1ac:	6c 83       	std	Y+4, r22	; 0x04
 1ae:	7d 83       	std	Y+5, r23	; 0x05
 1b0:	8e 83       	std	Y+6, r24	; 0x06
 1b2:	9f 83       	std	Y+7, r25	; 0x07
 1b4:	23 e0       	ldi	r18, 0x03	; 3
 1b6:	2e 15       	cp	r18, r14
 1b8:	f8 f0       	brcs	.+62     	; 0x1f8 <sampleInputs+0x124>
 1ba:	98 01       	movw	r18, r16
 1bc:	2f 5f       	subi	r18, 0xFF	; 255
 1be:	3f 4f       	sbci	r19, 0xFF	; 255
 1c0:	f9 01       	movw	r30, r18
 1c2:	ee 0f       	add	r30, r30
 1c4:	ff 1f       	adc	r31, r31
 1c6:	e2 0f       	add	r30, r18
 1c8:	f3 1f       	adc	r31, r19
 1ca:	ee 0f       	add	r30, r30
 1cc:	ff 1f       	adc	r31, r31
 1ce:	ee 0f       	add	r30, r30
 1d0:	ff 1f       	adc	r31, r31
 1d2:	e5 5f       	subi	r30, 0xF5	; 245
 1d4:	fe 4f       	sbci	r31, 0xFE	; 254
 1d6:	24 81       	ldd	r18, Z+4	; 0x04
 1d8:	35 81       	ldd	r19, Z+5	; 0x05
 1da:	46 81       	ldd	r20, Z+6	; 0x06
 1dc:	57 81       	ldd	r21, Z+7	; 0x07
 1de:	0e 94 14 07 	call	0xe28	; 0xe28 <__subsf3>
 1e2:	20 e0       	ldi	r18, 0x00	; 0
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	40 ea       	ldi	r20, 0xA0	; 160
 1e8:	50 e4       	ldi	r21, 0x40	; 64
 1ea:	0e 94 4c 07 	call	0xe98	; 0xe98 <__divsf3>
 1ee:	68 87       	std	Y+8, r22	; 0x08
 1f0:	79 87       	std	Y+9, r23	; 0x09
 1f2:	8a 87       	std	Y+10, r24	; 0x0a
 1f4:	9b 87       	std	Y+11, r25	; 0x0b
 1f6:	1f c0       	rjmp	.+62     	; 0x236 <sampleInputs+0x162>
 1f8:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <arrMotorData+0x4>
 1fc:	30 91 10 01 	lds	r19, 0x0110	; 0x800110 <arrMotorData+0x5>
 200:	40 91 11 01 	lds	r20, 0x0111	; 0x800111 <arrMotorData+0x6>
 204:	50 91 12 01 	lds	r21, 0x0112	; 0x800112 <arrMotorData+0x7>
 208:	0e 94 14 07 	call	0xe28	; 0xe28 <__subsf3>
 20c:	20 e0       	ldi	r18, 0x00	; 0
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	40 ea       	ldi	r20, 0xA0	; 160
 212:	50 e4       	ldi	r21, 0x40	; 64
 214:	0e 94 4c 07 	call	0xe98	; 0xe98 <__divsf3>
 218:	f8 01       	movw	r30, r16
 21a:	ee 0f       	add	r30, r30
 21c:	ff 1f       	adc	r31, r31
 21e:	e0 0f       	add	r30, r16
 220:	f1 1f       	adc	r31, r17
 222:	ee 0f       	add	r30, r30
 224:	ff 1f       	adc	r31, r31
 226:	ee 0f       	add	r30, r30
 228:	ff 1f       	adc	r31, r31
 22a:	e5 5f       	subi	r30, 0xF5	; 245
 22c:	fe 4f       	sbci	r31, 0xFE	; 254
 22e:	60 87       	std	Z+8, r22	; 0x08
 230:	71 87       	std	Z+9, r23	; 0x09
 232:	82 87       	std	Z+10, r24	; 0x0a
 234:	93 87       	std	Z+11, r25	; 0x0b
 236:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <dataBufferFull>
 23a:	81 11       	cpse	r24, r1
 23c:	17 c0       	rjmp	.+46     	; 0x26c <sampleInputs+0x198>
 23e:	f8 01       	movw	r30, r16
 240:	ee 0f       	add	r30, r30
 242:	ff 1f       	adc	r31, r31
 244:	df 01       	movw	r26, r30
 246:	a0 0f       	add	r26, r16
 248:	b1 1f       	adc	r27, r17
 24a:	aa 0f       	add	r26, r26
 24c:	bb 1f       	adc	r27, r27
 24e:	aa 0f       	add	r26, r26
 250:	bb 1f       	adc	r27, r27
 252:	a5 5f       	subi	r26, 0xF5	; 245
 254:	be 4f       	sbci	r27, 0xFE	; 254
 256:	14 96       	adiw	r26, 0x04	; 4
 258:	1d 92       	st	X+, r1
 25a:	1d 92       	st	X+, r1
 25c:	1d 92       	st	X+, r1
 25e:	1c 92       	st	X, r1
 260:	17 97       	sbiw	r26, 0x07	; 7
 262:	fd 01       	movw	r30, r26
 264:	10 86       	std	Z+8, r1	; 0x08
 266:	11 86       	std	Z+9, r1	; 0x09
 268:	12 86       	std	Z+10, r1	; 0x0a
 26a:	13 86       	std	Z+11, r1	; 0x0b
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	8e 0d       	add	r24, r14
 270:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <motorDataPointer>
 274:	85 30       	cpi	r24, 0x05	; 5
 276:	28 f0       	brcs	.+10     	; 0x282 <sampleInputs+0x1ae>
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <dataBufferFull>
 27e:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <motorDataPointer>
 282:	df 91       	pop	r29
 284:	cf 91       	pop	r28
 286:	1f 91       	pop	r17
 288:	0f 91       	pop	r16
 28a:	ff 90       	pop	r15
 28c:	ef 90       	pop	r14
 28e:	08 95       	ret

Disassembly of section .text.getTargetCurrent:

00000290 <getTargetCurrent>:
 290:	8f 92       	push	r8
 292:	9f 92       	push	r9
 294:	af 92       	push	r10
 296:	bf 92       	push	r11
 298:	cf 92       	push	r12
 29a:	df 92       	push	r13
 29c:	ef 92       	push	r14
 29e:	ff 92       	push	r15
 2a0:	cf 93       	push	r28
 2a2:	df 93       	push	r29
 2a4:	c0 91 03 01 	lds	r28, 0x0103	; 0x800103 <motorDataPointer>
 2a8:	d0 e0       	ldi	r29, 0x00	; 0
 2aa:	fe 01       	movw	r30, r28
 2ac:	ee 0f       	add	r30, r30
 2ae:	ff 1f       	adc	r31, r31
 2b0:	ec 0f       	add	r30, r28
 2b2:	fd 1f       	adc	r31, r29
 2b4:	ee 0f       	add	r30, r30
 2b6:	ff 1f       	adc	r31, r31
 2b8:	ee 0f       	add	r30, r30
 2ba:	ff 1f       	adc	r31, r31
 2bc:	e5 5f       	subi	r30, 0xF5	; 245
 2be:	fe 4f       	sbci	r31, 0xFE	; 254
 2c0:	c4 80       	ldd	r12, Z+4	; 0x04
 2c2:	d5 80       	ldd	r13, Z+5	; 0x05
 2c4:	e6 80       	ldd	r14, Z+6	; 0x06
 2c6:	f7 80       	ldd	r15, Z+7	; 0x07
 2c8:	20 e0       	ldi	r18, 0x00	; 0
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	48 e4       	ldi	r20, 0x48	; 72
 2ce:	53 e4       	ldi	r21, 0x43	; 67
 2d0:	c7 01       	movw	r24, r14
 2d2:	b6 01       	movw	r22, r12
 2d4:	0e 94 42 07 	call	0xe84	; 0xe84 <__cmpsf2>
 2d8:	88 23       	and	r24, r24
 2da:	54 f5       	brge	.+84     	; 0x330 <getTargetCurrent+0xa0>
 2dc:	c7 01       	movw	r24, r14
 2de:	b6 01       	movw	r22, r12
 2e0:	0e 94 3c 07 	call	0xe78	; 0xe78 <abs>
 2e4:	bc 01       	movw	r22, r24
 2e6:	99 0f       	add	r25, r25
 2e8:	88 0b       	sbc	r24, r24
 2ea:	99 0b       	sbc	r25, r25
 2ec:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__floatsisf>
 2f0:	a7 01       	movw	r20, r14
 2f2:	96 01       	movw	r18, r12
 2f4:	0e 94 50 07 	call	0xea0	; 0xea0 <__mulsf3>
 2f8:	6b 01       	movw	r12, r22
 2fa:	7c 01       	movw	r14, r24
 2fc:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <potFriction_steps>
 300:	70 e0       	ldi	r23, 0x00	; 0
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__floatsisf>
 30a:	a7 01       	movw	r20, r14
 30c:	96 01       	movw	r18, r12
 30e:	0e 94 50 07 	call	0xea0	; 0xea0 <__mulsf3>
 312:	20 e0       	ldi	r18, 0x00	; 0
 314:	30 e4       	ldi	r19, 0x40	; 64
 316:	4c e9       	ldi	r20, 0x9C	; 156
 318:	59 e4       	ldi	r21, 0x49	; 73
 31a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__divsf3>
 31e:	20 e0       	ldi	r18, 0x00	; 0
 320:	30 e0       	ldi	r19, 0x00	; 0
 322:	40 e0       	ldi	r20, 0x00	; 0
 324:	53 e4       	ldi	r21, 0x43	; 67
 326:	0e 94 15 07 	call	0xe2a	; 0xe2a <__addsf3>
 32a:	6b 01       	movw	r12, r22
 32c:	7c 01       	movw	r14, r24
 32e:	07 c0       	rjmp	.+14     	; 0x33e <getTargetCurrent+0xae>
 330:	0f 2e       	mov	r0, r31
 332:	c1 2c       	mov	r12, r1
 334:	d1 2c       	mov	r13, r1
 336:	e1 2c       	mov	r14, r1
 338:	f3 e4       	ldi	r31, 0x43	; 67
 33a:	ff 2e       	mov	r15, r31
 33c:	f0 2d       	mov	r31, r0
 33e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <potSlope_steps>
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	80 58       	subi	r24, 0x80	; 128
 346:	91 09       	sbc	r25, r1
 348:	bc 01       	movw	r22, r24
 34a:	12 f4       	brpl	.+4      	; 0x350 <getTargetCurrent+0xc0>
 34c:	6f 5f       	subi	r22, 0xFF	; 255
 34e:	7f 4f       	sbci	r23, 0xFF	; 255
 350:	75 95       	asr	r23
 352:	67 95       	ror	r22
 354:	07 2e       	mov	r0, r23
 356:	00 0c       	add	r0, r0
 358:	88 0b       	sbc	r24, r24
 35a:	99 0b       	sbc	r25, r25
 35c:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__floatsisf>
 360:	a7 01       	movw	r20, r14
 362:	96 01       	movw	r18, r12
 364:	0e 94 15 07 	call	0xe2a	; 0xe2a <__addsf3>
 368:	6b 01       	movw	r12, r22
 36a:	7c 01       	movw	r14, r24
 36c:	ce 01       	movw	r24, r28
 36e:	88 0f       	add	r24, r24
 370:	99 1f       	adc	r25, r25
 372:	c8 0f       	add	r28, r24
 374:	d9 1f       	adc	r29, r25
 376:	cc 0f       	add	r28, r28
 378:	dd 1f       	adc	r29, r29
 37a:	cc 0f       	add	r28, r28
 37c:	dd 1f       	adc	r29, r29
 37e:	c5 5f       	subi	r28, 0xF5	; 245
 380:	de 4f       	sbci	r29, 0xFE	; 254
 382:	88 84       	ldd	r8, Y+8	; 0x08
 384:	99 84       	ldd	r9, Y+9	; 0x09
 386:	aa 84       	ldd	r10, Y+10	; 0x0a
 388:	bb 84       	ldd	r11, Y+11	; 0x0b
 38a:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <potMomentum_steps>
 38e:	70 e0       	ldi	r23, 0x00	; 0
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__floatsisf>
 398:	a5 01       	movw	r20, r10
 39a:	94 01       	movw	r18, r8
 39c:	0e 94 50 07 	call	0xea0	; 0xea0 <__mulsf3>
 3a0:	20 e0       	ldi	r18, 0x00	; 0
 3a2:	30 e0       	ldi	r19, 0x00	; 0
 3a4:	40 ea       	ldi	r20, 0xA0	; 160
 3a6:	50 e4       	ldi	r21, 0x40	; 64
 3a8:	0e 94 50 07 	call	0xea0	; 0xea0 <__mulsf3>
 3ac:	9b 01       	movw	r18, r22
 3ae:	ac 01       	movw	r20, r24
 3b0:	c7 01       	movw	r24, r14
 3b2:	b6 01       	movw	r22, r12
 3b4:	0e 94 15 07 	call	0xe2a	; 0xe2a <__addsf3>
 3b8:	6b 01       	movw	r12, r22
 3ba:	7c 01       	movw	r14, r24
 3bc:	20 e0       	ldi	r18, 0x00	; 0
 3be:	30 e0       	ldi	r19, 0x00	; 0
 3c0:	a9 01       	movw	r20, r18
 3c2:	0e 94 42 07 	call	0xe84	; 0xe84 <__cmpsf2>
 3c6:	88 23       	and	r24, r24
 3c8:	1c f4       	brge	.+6      	; 0x3d0 <getTargetCurrent+0x140>
 3ca:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <targetCurrent_steps>
 3ce:	14 c0       	rjmp	.+40     	; 0x3f8 <getTargetCurrent+0x168>
 3d0:	20 e0       	ldi	r18, 0x00	; 0
 3d2:	30 e0       	ldi	r19, 0x00	; 0
 3d4:	4f e7       	ldi	r20, 0x7F	; 127
 3d6:	53 e4       	ldi	r21, 0x43	; 67
 3d8:	c7 01       	movw	r24, r14
 3da:	b6 01       	movw	r22, r12
 3dc:	0e 94 47 07 	call	0xe8e	; 0xe8e <__gesf2>
 3e0:	18 16       	cp	r1, r24
 3e2:	24 f4       	brge	.+8      	; 0x3ec <getTargetCurrent+0x15c>
 3e4:	8f ef       	ldi	r24, 0xFF	; 255
 3e6:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <targetCurrent_steps>
 3ea:	06 c0       	rjmp	.+12     	; 0x3f8 <getTargetCurrent+0x168>
 3ec:	c7 01       	movw	r24, r14
 3ee:	b6 01       	movw	r22, r12
 3f0:	0e 94 20 06 	call	0xc40	; 0xc40 <__fixunssfsi>
 3f4:	60 93 09 01 	sts	0x0109, r22	; 0x800109 <targetCurrent_steps>
 3f8:	df 91       	pop	r29
 3fa:	cf 91       	pop	r28
 3fc:	ff 90       	pop	r15
 3fe:	ef 90       	pop	r14
 400:	df 90       	pop	r13
 402:	cf 90       	pop	r12
 404:	bf 90       	pop	r11
 406:	af 90       	pop	r10
 408:	9f 90       	pop	r9
 40a:	8f 90       	pop	r8
 40c:	08 95       	ret

Disassembly of section .text.updateMotorPID:

0000040e <updateMotorPID>:
 40e:	cf 92       	push	r12
 410:	df 92       	push	r13
 412:	ef 92       	push	r14
 414:	ff 92       	push	r15
 416:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <targetCurrent_steps>
 41a:	70 e0       	ldi	r23, 0x00	; 0
 41c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 420:	68 1b       	sub	r22, r24
 422:	71 09       	sbc	r23, r1
 424:	07 2e       	mov	r0, r23
 426:	00 0c       	add	r0, r0
 428:	88 0b       	sbc	r24, r24
 42a:	99 0b       	sbc	r25, r25
 42c:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__floatsisf>
 430:	2a e0       	ldi	r18, 0x0A	; 10
 432:	37 ed       	ldi	r19, 0xD7	; 215
 434:	43 ea       	ldi	r20, 0xA3	; 163
 436:	5b e3       	ldi	r21, 0x3B	; 59
 438:	0e 94 50 07 	call	0xea0	; 0xea0 <__mulsf3>
 43c:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <motorVoltageControl>
 440:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <motorVoltageControl+0x1>
 444:	40 91 4c 01 	lds	r20, 0x014C	; 0x80014c <motorVoltageControl+0x2>
 448:	50 91 4d 01 	lds	r21, 0x014D	; 0x80014d <motorVoltageControl+0x3>
 44c:	0e 94 15 07 	call	0xe2a	; 0xe2a <__addsf3>
 450:	6b 01       	movw	r12, r22
 452:	7c 01       	movw	r14, r24
 454:	60 93 4a 01 	sts	0x014A, r22	; 0x80014a <motorVoltageControl>
 458:	70 93 4b 01 	sts	0x014B, r23	; 0x80014b <motorVoltageControl+0x1>
 45c:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <motorVoltageControl+0x2>
 460:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <motorVoltageControl+0x3>
 464:	20 e0       	ldi	r18, 0x00	; 0
 466:	30 e0       	ldi	r19, 0x00	; 0
 468:	40 e8       	ldi	r20, 0x80	; 128
 46a:	52 ec       	ldi	r21, 0xC2	; 194
 46c:	0e 94 42 07 	call	0xe84	; 0xe84 <__cmpsf2>
 470:	88 23       	and	r24, r24
 472:	6c f4       	brge	.+26     	; 0x48e <updateMotorPID+0x80>
 474:	80 e0       	ldi	r24, 0x00	; 0
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	a0 e8       	ldi	r26, 0x80	; 128
 47a:	b2 ec       	ldi	r27, 0xC2	; 194
 47c:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <motorVoltageControl>
 480:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <motorVoltageControl+0x1>
 484:	a0 93 4c 01 	sts	0x014C, r26	; 0x80014c <motorVoltageControl+0x2>
 488:	b0 93 4d 01 	sts	0x014D, r27	; 0x80014d <motorVoltageControl+0x3>
 48c:	16 c0       	rjmp	.+44     	; 0x4ba <updateMotorPID+0xac>
 48e:	20 e0       	ldi	r18, 0x00	; 0
 490:	30 e0       	ldi	r19, 0x00	; 0
 492:	40 e8       	ldi	r20, 0x80	; 128
 494:	52 e4       	ldi	r21, 0x42	; 66
 496:	c7 01       	movw	r24, r14
 498:	b6 01       	movw	r22, r12
 49a:	0e 94 47 07 	call	0xe8e	; 0xe8e <__gesf2>
 49e:	18 16       	cp	r1, r24
 4a0:	64 f4       	brge	.+24     	; 0x4ba <updateMotorPID+0xac>
 4a2:	80 e0       	ldi	r24, 0x00	; 0
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	a0 e8       	ldi	r26, 0x80	; 128
 4a8:	b2 e4       	ldi	r27, 0x42	; 66
 4aa:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <motorVoltageControl>
 4ae:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <motorVoltageControl+0x1>
 4b2:	a0 93 4c 01 	sts	0x014C, r26	; 0x80014c <motorVoltageControl+0x2>
 4b6:	b0 93 4d 01 	sts	0x014D, r27	; 0x80014d <motorVoltageControl+0x3>
 4ba:	c0 90 4a 01 	lds	r12, 0x014A	; 0x80014a <motorVoltageControl>
 4be:	d0 90 4b 01 	lds	r13, 0x014B	; 0x80014b <motorVoltageControl+0x1>
 4c2:	e0 90 4c 01 	lds	r14, 0x014C	; 0x80014c <motorVoltageControl+0x2>
 4c6:	f0 90 4d 01 	lds	r15, 0x014D	; 0x80014d <motorVoltageControl+0x3>
 4ca:	20 e0       	ldi	r18, 0x00	; 0
 4cc:	30 e0       	ldi	r19, 0x00	; 0
 4ce:	a9 01       	movw	r20, r18
 4d0:	c7 01       	movw	r24, r14
 4d2:	b6 01       	movw	r22, r12
 4d4:	0e 94 42 07 	call	0xe84	; 0xe84 <__cmpsf2>
 4d8:	88 23       	and	r24, r24
 4da:	b4 f4       	brge	.+44     	; 0x508 <updateMotorPID+0xfa>
 4dc:	c7 01       	movw	r24, r14
 4de:	b6 01       	movw	r22, r12
 4e0:	90 58       	subi	r25, 0x80	; 128
 4e2:	0e 94 20 06 	call	0xc40	; 0xc40 <__fixunssfsi>
 4e6:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 4ea:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 4ee:	41 e0       	ldi	r20, 0x01	; 1
 4f0:	50 e0       	ldi	r21, 0x00	; 0
 4f2:	64 e0       	ldi	r22, 0x04	; 4
 4f4:	84 e4       	ldi	r24, 0x44	; 68
 4f6:	0e 94 b7 02 	call	0x56e	; 0x56e <digitalWrite>
 4fa:	40 e0       	ldi	r20, 0x00	; 0
 4fc:	50 e0       	ldi	r21, 0x00	; 0
 4fe:	60 e0       	ldi	r22, 0x00	; 0
 500:	82 e4       	ldi	r24, 0x42	; 66
 502:	0e 94 b7 02 	call	0x56e	; 0x56e <digitalWrite>
 506:	2e c0       	rjmp	.+92     	; 0x564 <updateMotorPID+0x156>
 508:	20 e0       	ldi	r18, 0x00	; 0
 50a:	30 e0       	ldi	r19, 0x00	; 0
 50c:	a9 01       	movw	r20, r18
 50e:	c7 01       	movw	r24, r14
 510:	b6 01       	movw	r22, r12
 512:	0e 94 47 07 	call	0xe8e	; 0xe8e <__gesf2>
 516:	18 16       	cp	r1, r24
 518:	ac f4       	brge	.+42     	; 0x544 <updateMotorPID+0x136>
 51a:	c7 01       	movw	r24, r14
 51c:	b6 01       	movw	r22, r12
 51e:	0e 94 20 06 	call	0xc40	; 0xc40 <__fixunssfsi>
 522:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 526:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 52a:	40 e0       	ldi	r20, 0x00	; 0
 52c:	50 e0       	ldi	r21, 0x00	; 0
 52e:	64 e0       	ldi	r22, 0x04	; 4
 530:	84 e4       	ldi	r24, 0x44	; 68
 532:	0e 94 b7 02 	call	0x56e	; 0x56e <digitalWrite>
 536:	41 e0       	ldi	r20, 0x01	; 1
 538:	50 e0       	ldi	r21, 0x00	; 0
 53a:	60 e0       	ldi	r22, 0x00	; 0
 53c:	82 e4       	ldi	r24, 0x42	; 66
 53e:	0e 94 b7 02 	call	0x56e	; 0x56e <digitalWrite>
 542:	10 c0       	rjmp	.+32     	; 0x564 <updateMotorPID+0x156>
 544:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 548:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 54c:	41 e0       	ldi	r20, 0x01	; 1
 54e:	50 e0       	ldi	r21, 0x00	; 0
 550:	64 e0       	ldi	r22, 0x04	; 4
 552:	84 e4       	ldi	r24, 0x44	; 68
 554:	0e 94 b7 02 	call	0x56e	; 0x56e <digitalWrite>
 558:	41 e0       	ldi	r20, 0x01	; 1
 55a:	50 e0       	ldi	r21, 0x00	; 0
 55c:	60 e0       	ldi	r22, 0x00	; 0
 55e:	82 e4       	ldi	r24, 0x42	; 66
 560:	0e 94 b7 02 	call	0x56e	; 0x56e <digitalWrite>
 564:	ff 90       	pop	r15
 566:	ef 90       	pop	r14
 568:	df 90       	pop	r13
 56a:	cf 90       	pop	r12
 56c:	08 95       	ret

Disassembly of section .text.__vector_9:

00000c9e <__vector_9>:
void getTargetCurrent();
float motorVoltageControl;

#warning "Get temperature of controller from ADC8"

ISR (TIMER2_OVF_vect) {
 c9e:	1f 92       	push	r1
 ca0:	0f 92       	push	r0
 ca2:	0f b6       	in	r0, 0x3f	; 63
 ca4:	0f 92       	push	r0
 ca6:	11 24       	eor	r1, r1
 ca8:	2f 93       	push	r18
 caa:	3f 93       	push	r19
 cac:	4f 93       	push	r20
 cae:	5f 93       	push	r21
 cb0:	6f 93       	push	r22
 cb2:	7f 93       	push	r23
 cb4:	8f 93       	push	r24
 cb6:	9f 93       	push	r25
 cb8:	af 93       	push	r26
 cba:	bf 93       	push	r27
 cbc:	ef 93       	push	r30
 cbe:	ff 93       	push	r31
	TCNT2 = 99;	// 100 Hz sampling	
 cc0:	83 e6       	ldi	r24, 0x63	; 99
 cc2:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
	sampleInputs();
 cc6:	0e 94 6a 00 	call	0xd4	; 0xd4 <__data_load_end>
	getTargetCurrent();	
 cca:	0e 94 48 01 	call	0x290	; 0x290 <getTargetCurrent>
	updateMotorPID();
 cce:	0e 94 07 02 	call	0x40e	; 0x40e <updateMotorPID>
	updateResistorPID();
}
 cd2:	ff 91       	pop	r31
 cd4:	ef 91       	pop	r30
 cd6:	bf 91       	pop	r27
 cd8:	af 91       	pop	r26
 cda:	9f 91       	pop	r25
 cdc:	8f 91       	pop	r24
 cde:	7f 91       	pop	r23
 ce0:	6f 91       	pop	r22
 ce2:	5f 91       	pop	r21
 ce4:	4f 91       	pop	r20
 ce6:	3f 91       	pop	r19
 ce8:	2f 91       	pop	r18
 cea:	0f 90       	pop	r0
 cec:	0f be       	out	0x3f, r0	; 63
 cee:	0f 90       	pop	r0
 cf0:	1f 90       	pop	r1
 cf2:	18 95       	reti

Disassembly of section .text.updateAnalogInputs:

000009b8 <updateAnalogInputs>:
void updateResistorPID(){
	#warning "Write resistor PID and test resistor outputs"
}

void updateAnalogInputs(){
	if (!(ADCSRA & (1 << ADSC))) {
 9b8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 9bc:	86 fd       	sbrc	r24, 6
 9be:	52 c0       	rjmp	.+164    	; 0xa64 <updateAnalogInputs+0xac>
		// ADC conversion not running, start new conversion
		switch (currentADC){
 9c0:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <currentADC>
 9c4:	8e 2f       	mov	r24, r30
 9c6:	90 e0       	ldi	r25, 0x00	; 0
 9c8:	89 30       	cpi	r24, 0x09	; 9
 9ca:	91 05       	cpc	r25, r1
 9cc:	e0 f5       	brcc	.+120    	; 0xa46 <updateAnalogInputs+0x8e>
 9ce:	fc 01       	movw	r30, r24
 9d0:	ec 5c       	subi	r30, 0xCC	; 204
 9d2:	ff 4f       	sbci	r31, 0xFF	; 255
 9d4:	0c 94 36 07 	jmp	0xe6c	; 0xe6c <__tablejump2__>
			case 0:
				potSlope_steps = ADCH;
 9d8:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 9dc:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <potSlope_steps>
				currentADC = 1;
 9e0:	81 e0       	ldi	r24, 0x01	; 1
 9e2:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <currentADC>
				break;
 9e6:	31 c0       	rjmp	.+98     	; 0xa4a <updateAnalogInputs+0x92>
			case 1:
				potFriction_steps = ADCH;
 9e8:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 9ec:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <potFriction_steps>
				currentADC = 2;
 9f0:	82 e0       	ldi	r24, 0x02	; 2
 9f2:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <currentADC>
				break;
 9f6:	29 c0       	rjmp	.+82     	; 0xa4a <updateAnalogInputs+0x92>
			case 2:
				battTemp_steps = ADCH;
 9f8:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 9fc:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <battTemp_steps>
				currentADC = 3;
 a00:	83 e0       	ldi	r24, 0x03	; 3
 a02:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <currentADC>
				break;
 a06:	21 c0       	rjmp	.+66     	; 0xa4a <updateAnalogInputs+0x92>
			case 3:
				motorCurrent_steps = ADCH;
 a08:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 a0c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				currentADC = 4;
 a10:	84 e0       	ldi	r24, 0x04	; 4
 a12:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <currentADC>
				break;
 a16:	19 c0       	rjmp	.+50     	; 0xa4a <updateAnalogInputs+0x92>
			case 4:
				battVoltageRef_steps = ADCH;
 a18:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 a1c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <battVoltageRef_steps>
				currentADC = 7;
 a20:	87 e0       	ldi	r24, 0x07	; 7
 a22:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <currentADC>
				break;
 a26:	11 c0       	rjmp	.+34     	; 0xa4a <updateAnalogInputs+0x92>
			case 7:
				potMomentum_steps = ADCH;
 a28:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 a2c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <potMomentum_steps>
				currentADC = 8;
 a30:	88 e0       	ldi	r24, 0x08	; 8
 a32:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <currentADC>
				break;
 a36:	09 c0       	rjmp	.+18     	; 0xa4a <updateAnalogInputs+0x92>
			case 8:
				controllerTemp_steps = ADCH;
 a38:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 a3c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <controllerTemp_steps>
				currentADC = 0;
 a40:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <currentADC>
				break;
 a44:	02 c0       	rjmp	.+4      	; 0xa4a <updateAnalogInputs+0x92>
			default:
				currentADC = 0;
 a46:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <currentADC>
				break;
		}
			
		ADMUX = ADMUX & 0b11110000 | currentADC; // Set ADC channel to scan
 a4a:	ec e7       	ldi	r30, 0x7C	; 124
 a4c:	f0 e0       	ldi	r31, 0x00	; 0
 a4e:	80 81       	ld	r24, Z
 a50:	80 7f       	andi	r24, 0xF0	; 240
 a52:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <currentADC>
 a56:	89 2b       	or	r24, r25
 a58:	80 83       	st	Z, r24
		ADCSRA |= (1 << ADSC); // Start conversion again
 a5a:	ea e7       	ldi	r30, 0x7A	; 122
 a5c:	f0 e0       	ldi	r31, 0x00	; 0
 a5e:	80 81       	ld	r24, Z
 a60:	80 64       	ori	r24, 0x40	; 64
 a62:	80 83       	st	Z, r24
 a64:	08 95       	ret

Disassembly of section .text.main:

00000e10 <main>:
	}
}

int main(void)
{
	setPinModes();
 e10:	0e 94 33 05 	call	0xa66	; 0xa66 <setPinModes>
	setPwmTimers();
 e14:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <setPwmTimers>
	setAnalogInputs();
 e18:	0e 94 c0 06 	call	0xd80	; 0xd80 <setAnalogInputs>
	setSampleTimer();
 e1c:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <setSampleTimer>
	sei();	
 e20:	78 94       	sei
	
    while(1)
    {
		updateAnalogInputs();		
 e22:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <updateAnalogInputs>
 e26:	fd cf       	rjmp	.-6      	; 0xe22 <main+0x12>

Disassembly of section .text.avrlibc.fplib:

00000e28 <__subsf3>:
 e28:	50 58       	subi	r21, 0x80	; 128

00000e2a <__addsf3>:
 e2a:	bb 27       	eor	r27, r27
 e2c:	aa 27       	eor	r26, r26
 e2e:	0e 94 14 04 	call	0x828	; 0x828 <__addsf3x>
 e32:	0c 94 ea 06 	jmp	0xdd4	; 0xdd4 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00000828 <__addsf3x>:
 828:	11 c0       	rjmp	.+34     	; 0x84c <__addsf3x+0x24>
 82a:	0e 94 1b 07 	call	0xe36	; 0xe36 <__fp_pscA>
 82e:	38 f0       	brcs	.+14     	; 0x83e <__addsf3x+0x16>
 830:	0e 94 22 07 	call	0xe44	; 0xe44 <__fp_pscB>
 834:	20 f0       	brcs	.+8      	; 0x83e <__addsf3x+0x16>
 836:	39 f4       	brne	.+14     	; 0x846 <__addsf3x+0x1e>
 838:	9f 3f       	cpi	r25, 0xFF	; 255
 83a:	19 f4       	brne	.+6      	; 0x842 <__addsf3x+0x1a>
 83c:	26 f4       	brtc	.+8      	; 0x846 <__addsf3x+0x1e>
 83e:	0c 94 54 07 	jmp	0xea8	; 0xea8 <__fp_nan>
 842:	0e f4       	brtc	.+2      	; 0x846 <__addsf3x+0x1e>
 844:	e0 95       	com	r30
 846:	e7 fb       	bst	r30, 7
 848:	0c 94 30 07 	jmp	0xe60	; 0xe60 <__fp_inf>
 84c:	e9 2f       	mov	r30, r25
 84e:	0e 94 9e 06 	call	0xd3c	; 0xd3c <__fp_split3>
 852:	58 f3       	brcs	.-42     	; 0x82a <__addsf3x+0x2>
 854:	ba 17       	cp	r27, r26
 856:	62 07       	cpc	r22, r18
 858:	73 07       	cpc	r23, r19
 85a:	84 07       	cpc	r24, r20
 85c:	95 07       	cpc	r25, r21
 85e:	20 f0       	brcs	.+8      	; 0x868 <__addsf3x+0x40>
 860:	79 f4       	brne	.+30     	; 0x880 <__addsf3x+0x58>
 862:	a6 f5       	brtc	.+104    	; 0x8cc <__addsf3x+0xa4>
 864:	0c 94 29 07 	jmp	0xe52	; 0xe52 <__fp_zero>
 868:	0e f4       	brtc	.+2      	; 0x86c <__addsf3x+0x44>
 86a:	e0 95       	com	r30
 86c:	0b 2e       	mov	r0, r27
 86e:	ba 2f       	mov	r27, r26
 870:	a0 2d       	mov	r26, r0
 872:	0b 01       	movw	r0, r22
 874:	b9 01       	movw	r22, r18
 876:	90 01       	movw	r18, r0
 878:	0c 01       	movw	r0, r24
 87a:	ca 01       	movw	r24, r20
 87c:	a0 01       	movw	r20, r0
 87e:	11 24       	eor	r1, r1
 880:	ff 27       	eor	r31, r31
 882:	59 1b       	sub	r21, r25
 884:	99 f0       	breq	.+38     	; 0x8ac <__addsf3x+0x84>
 886:	59 3f       	cpi	r21, 0xF9	; 249
 888:	50 f4       	brcc	.+20     	; 0x89e <__addsf3x+0x76>
 88a:	50 3e       	cpi	r21, 0xE0	; 224
 88c:	68 f1       	brcs	.+90     	; 0x8e8 <__addsf3x+0xc0>
 88e:	1a 16       	cp	r1, r26
 890:	f0 40       	sbci	r31, 0x00	; 0
 892:	a2 2f       	mov	r26, r18
 894:	23 2f       	mov	r18, r19
 896:	34 2f       	mov	r19, r20
 898:	44 27       	eor	r20, r20
 89a:	58 5f       	subi	r21, 0xF8	; 248
 89c:	f3 cf       	rjmp	.-26     	; 0x884 <__addsf3x+0x5c>
 89e:	46 95       	lsr	r20
 8a0:	37 95       	ror	r19
 8a2:	27 95       	ror	r18
 8a4:	a7 95       	ror	r26
 8a6:	f0 40       	sbci	r31, 0x00	; 0
 8a8:	53 95       	inc	r21
 8aa:	c9 f7       	brne	.-14     	; 0x89e <__addsf3x+0x76>
 8ac:	7e f4       	brtc	.+30     	; 0x8cc <__addsf3x+0xa4>
 8ae:	1f 16       	cp	r1, r31
 8b0:	ba 0b       	sbc	r27, r26
 8b2:	62 0b       	sbc	r22, r18
 8b4:	73 0b       	sbc	r23, r19
 8b6:	84 0b       	sbc	r24, r20
 8b8:	ba f0       	brmi	.+46     	; 0x8e8 <__addsf3x+0xc0>
 8ba:	91 50       	subi	r25, 0x01	; 1
 8bc:	a1 f0       	breq	.+40     	; 0x8e6 <__addsf3x+0xbe>
 8be:	ff 0f       	add	r31, r31
 8c0:	bb 1f       	adc	r27, r27
 8c2:	66 1f       	adc	r22, r22
 8c4:	77 1f       	adc	r23, r23
 8c6:	88 1f       	adc	r24, r24
 8c8:	c2 f7       	brpl	.-16     	; 0x8ba <__addsf3x+0x92>
 8ca:	0e c0       	rjmp	.+28     	; 0x8e8 <__addsf3x+0xc0>
 8cc:	ba 0f       	add	r27, r26
 8ce:	62 1f       	adc	r22, r18
 8d0:	73 1f       	adc	r23, r19
 8d2:	84 1f       	adc	r24, r20
 8d4:	48 f4       	brcc	.+18     	; 0x8e8 <__addsf3x+0xc0>
 8d6:	87 95       	ror	r24
 8d8:	77 95       	ror	r23
 8da:	67 95       	ror	r22
 8dc:	b7 95       	ror	r27
 8de:	f7 95       	ror	r31
 8e0:	9e 3f       	cpi	r25, 0xFE	; 254
 8e2:	08 f0       	brcs	.+2      	; 0x8e6 <__addsf3x+0xbe>
 8e4:	b0 cf       	rjmp	.-160    	; 0x846 <__addsf3x+0x1e>
 8e6:	93 95       	inc	r25
 8e8:	88 0f       	add	r24, r24
 8ea:	08 f0       	brcs	.+2      	; 0x8ee <__addsf3x+0xc6>
 8ec:	99 27       	eor	r25, r25
 8ee:	ee 0f       	add	r30, r30
 8f0:	97 95       	ror	r25
 8f2:	87 95       	ror	r24
 8f4:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000e84 <__cmpsf2>:
 e84:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <__fp_cmp>
 e88:	08 f4       	brcc	.+2      	; 0xe8c <__cmpsf2+0x8>
 e8a:	81 e0       	ldi	r24, 0x01	; 1
 e8c:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000e98 <__divsf3>:
 e98:	0e 94 3b 03 	call	0x676	; 0x676 <__divsf3x>
 e9c:	0c 94 ea 06 	jmp	0xdd4	; 0xdd4 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00000676 <__divsf3x>:
 676:	10 c0       	rjmp	.+32     	; 0x698 <__divsf3x+0x22>
 678:	0e 94 22 07 	call	0xe44	; 0xe44 <__fp_pscB>
 67c:	58 f0       	brcs	.+22     	; 0x694 <__divsf3x+0x1e>
 67e:	0e 94 1b 07 	call	0xe36	; 0xe36 <__fp_pscA>
 682:	40 f0       	brcs	.+16     	; 0x694 <__divsf3x+0x1e>
 684:	29 f4       	brne	.+10     	; 0x690 <__divsf3x+0x1a>
 686:	5f 3f       	cpi	r21, 0xFF	; 255
 688:	29 f0       	breq	.+10     	; 0x694 <__divsf3x+0x1e>
 68a:	0c 94 30 07 	jmp	0xe60	; 0xe60 <__fp_inf>
 68e:	51 11       	cpse	r21, r1
 690:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <__fp_szero>
 694:	0c 94 54 07 	jmp	0xea8	; 0xea8 <__fp_nan>
 698:	0e 94 9e 06 	call	0xd3c	; 0xd3c <__fp_split3>
 69c:	68 f3       	brcs	.-38     	; 0x678 <__divsf3x+0x2>

0000069e <__divsf3_pse>:
 69e:	99 23       	and	r25, r25
 6a0:	b1 f3       	breq	.-20     	; 0x68e <__divsf3x+0x18>
 6a2:	55 23       	and	r21, r21
 6a4:	91 f3       	breq	.-28     	; 0x68a <__divsf3x+0x14>
 6a6:	95 1b       	sub	r25, r21
 6a8:	55 0b       	sbc	r21, r21
 6aa:	bb 27       	eor	r27, r27
 6ac:	aa 27       	eor	r26, r26
 6ae:	62 17       	cp	r22, r18
 6b0:	73 07       	cpc	r23, r19
 6b2:	84 07       	cpc	r24, r20
 6b4:	38 f0       	brcs	.+14     	; 0x6c4 <__divsf3_pse+0x26>
 6b6:	9f 5f       	subi	r25, 0xFF	; 255
 6b8:	5f 4f       	sbci	r21, 0xFF	; 255
 6ba:	22 0f       	add	r18, r18
 6bc:	33 1f       	adc	r19, r19
 6be:	44 1f       	adc	r20, r20
 6c0:	aa 1f       	adc	r26, r26
 6c2:	a9 f3       	breq	.-22     	; 0x6ae <__divsf3_pse+0x10>
 6c4:	35 d0       	rcall	.+106    	; 0x730 <__divsf3_pse+0x92>
 6c6:	0e 2e       	mov	r0, r30
 6c8:	3a f0       	brmi	.+14     	; 0x6d8 <__divsf3_pse+0x3a>
 6ca:	e0 e8       	ldi	r30, 0x80	; 128
 6cc:	32 d0       	rcall	.+100    	; 0x732 <__divsf3_pse+0x94>
 6ce:	91 50       	subi	r25, 0x01	; 1
 6d0:	50 40       	sbci	r21, 0x00	; 0
 6d2:	e6 95       	lsr	r30
 6d4:	00 1c       	adc	r0, r0
 6d6:	ca f7       	brpl	.-14     	; 0x6ca <__divsf3_pse+0x2c>
 6d8:	2b d0       	rcall	.+86     	; 0x730 <__divsf3_pse+0x92>
 6da:	fe 2f       	mov	r31, r30
 6dc:	29 d0       	rcall	.+82     	; 0x730 <__divsf3_pse+0x92>
 6de:	66 0f       	add	r22, r22
 6e0:	77 1f       	adc	r23, r23
 6e2:	88 1f       	adc	r24, r24
 6e4:	bb 1f       	adc	r27, r27
 6e6:	26 17       	cp	r18, r22
 6e8:	37 07       	cpc	r19, r23
 6ea:	48 07       	cpc	r20, r24
 6ec:	ab 07       	cpc	r26, r27
 6ee:	b0 e8       	ldi	r27, 0x80	; 128
 6f0:	09 f0       	breq	.+2      	; 0x6f4 <__divsf3_pse+0x56>
 6f2:	bb 0b       	sbc	r27, r27
 6f4:	80 2d       	mov	r24, r0
 6f6:	bf 01       	movw	r22, r30
 6f8:	ff 27       	eor	r31, r31
 6fa:	93 58       	subi	r25, 0x83	; 131
 6fc:	5f 4f       	sbci	r21, 0xFF	; 255
 6fe:	3a f0       	brmi	.+14     	; 0x70e <__divsf3_pse+0x70>
 700:	9e 3f       	cpi	r25, 0xFE	; 254
 702:	51 05       	cpc	r21, r1
 704:	78 f0       	brcs	.+30     	; 0x724 <__divsf3_pse+0x86>
 706:	0c 94 30 07 	jmp	0xe60	; 0xe60 <__fp_inf>
 70a:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <__fp_szero>
 70e:	5f 3f       	cpi	r21, 0xFF	; 255
 710:	e4 f3       	brlt	.-8      	; 0x70a <__divsf3_pse+0x6c>
 712:	98 3e       	cpi	r25, 0xE8	; 232
 714:	d4 f3       	brlt	.-12     	; 0x70a <__divsf3_pse+0x6c>
 716:	86 95       	lsr	r24
 718:	77 95       	ror	r23
 71a:	67 95       	ror	r22
 71c:	b7 95       	ror	r27
 71e:	f7 95       	ror	r31
 720:	9f 5f       	subi	r25, 0xFF	; 255
 722:	c9 f7       	brne	.-14     	; 0x716 <__divsf3_pse+0x78>
 724:	88 0f       	add	r24, r24
 726:	91 1d       	adc	r25, r1
 728:	96 95       	lsr	r25
 72a:	87 95       	ror	r24
 72c:	97 f9       	bld	r25, 7
 72e:	08 95       	ret
 730:	e1 e0       	ldi	r30, 0x01	; 1
 732:	66 0f       	add	r22, r22
 734:	77 1f       	adc	r23, r23
 736:	88 1f       	adc	r24, r24
 738:	bb 1f       	adc	r27, r27
 73a:	62 17       	cp	r22, r18
 73c:	73 07       	cpc	r23, r19
 73e:	84 07       	cpc	r24, r20
 740:	ba 07       	cpc	r27, r26
 742:	20 f0       	brcs	.+8      	; 0x74c <__divsf3_pse+0xae>
 744:	62 1b       	sub	r22, r18
 746:	73 0b       	sbc	r23, r19
 748:	84 0b       	sbc	r24, r20
 74a:	ba 0b       	sbc	r27, r26
 74c:	ee 1f       	adc	r30, r30
 74e:	88 f7       	brcc	.-30     	; 0x732 <__divsf3_pse+0x94>
 750:	e0 95       	com	r30
 752:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000c40 <__fixunssfsi>:
 c40:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__fp_splitA>
 c44:	88 f0       	brcs	.+34     	; 0xc68 <__fixunssfsi+0x28>
 c46:	9f 57       	subi	r25, 0x7F	; 127
 c48:	98 f0       	brcs	.+38     	; 0xc70 <__fixunssfsi+0x30>
 c4a:	b9 2f       	mov	r27, r25
 c4c:	99 27       	eor	r25, r25
 c4e:	b7 51       	subi	r27, 0x17	; 23
 c50:	b0 f0       	brcs	.+44     	; 0xc7e <__fixunssfsi+0x3e>
 c52:	e1 f0       	breq	.+56     	; 0xc8c <__fixunssfsi+0x4c>
 c54:	66 0f       	add	r22, r22
 c56:	77 1f       	adc	r23, r23
 c58:	88 1f       	adc	r24, r24
 c5a:	99 1f       	adc	r25, r25
 c5c:	1a f0       	brmi	.+6      	; 0xc64 <__fixunssfsi+0x24>
 c5e:	ba 95       	dec	r27
 c60:	c9 f7       	brne	.-14     	; 0xc54 <__fixunssfsi+0x14>
 c62:	14 c0       	rjmp	.+40     	; 0xc8c <__fixunssfsi+0x4c>
 c64:	b1 30       	cpi	r27, 0x01	; 1
 c66:	91 f0       	breq	.+36     	; 0xc8c <__fixunssfsi+0x4c>
 c68:	0e 94 29 07 	call	0xe52	; 0xe52 <__fp_zero>
 c6c:	b1 e0       	ldi	r27, 0x01	; 1
 c6e:	08 95       	ret
 c70:	0c 94 29 07 	jmp	0xe52	; 0xe52 <__fp_zero>
 c74:	67 2f       	mov	r22, r23
 c76:	78 2f       	mov	r23, r24
 c78:	88 27       	eor	r24, r24
 c7a:	b8 5f       	subi	r27, 0xF8	; 248
 c7c:	39 f0       	breq	.+14     	; 0xc8c <__fixunssfsi+0x4c>
 c7e:	b9 3f       	cpi	r27, 0xF9	; 249
 c80:	cc f3       	brlt	.-14     	; 0xc74 <__fixunssfsi+0x34>
 c82:	86 95       	lsr	r24
 c84:	77 95       	ror	r23
 c86:	67 95       	ror	r22
 c88:	b3 95       	inc	r27
 c8a:	d9 f7       	brne	.-10     	; 0xc82 <__fixunssfsi+0x42>
 c8c:	3e f4       	brtc	.+14     	; 0xc9c <__fixunssfsi+0x5c>
 c8e:	90 95       	com	r25
 c90:	80 95       	com	r24
 c92:	70 95       	com	r23
 c94:	61 95       	neg	r22
 c96:	7f 4f       	sbci	r23, 0xFF	; 255
 c98:	8f 4f       	sbci	r24, 0xFF	; 255
 c9a:	9f 4f       	sbci	r25, 0xFF	; 255
 c9c:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000af0 <__floatunsisf>:
 af0:	e8 94       	clt
 af2:	09 c0       	rjmp	.+18     	; 0xb06 <__floatsisf+0x12>

00000af4 <__floatsisf>:
 af4:	97 fb       	bst	r25, 7
 af6:	3e f4       	brtc	.+14     	; 0xb06 <__floatsisf+0x12>
 af8:	90 95       	com	r25
 afa:	80 95       	com	r24
 afc:	70 95       	com	r23
 afe:	61 95       	neg	r22
 b00:	7f 4f       	sbci	r23, 0xFF	; 255
 b02:	8f 4f       	sbci	r24, 0xFF	; 255
 b04:	9f 4f       	sbci	r25, 0xFF	; 255
 b06:	99 23       	and	r25, r25
 b08:	a9 f0       	breq	.+42     	; 0xb34 <__floatsisf+0x40>
 b0a:	f9 2f       	mov	r31, r25
 b0c:	96 e9       	ldi	r25, 0x96	; 150
 b0e:	bb 27       	eor	r27, r27
 b10:	93 95       	inc	r25
 b12:	f6 95       	lsr	r31
 b14:	87 95       	ror	r24
 b16:	77 95       	ror	r23
 b18:	67 95       	ror	r22
 b1a:	b7 95       	ror	r27
 b1c:	f1 11       	cpse	r31, r1
 b1e:	f8 cf       	rjmp	.-16     	; 0xb10 <__floatsisf+0x1c>
 b20:	fa f4       	brpl	.+62     	; 0xb60 <__floatsisf+0x6c>
 b22:	bb 0f       	add	r27, r27
 b24:	11 f4       	brne	.+4      	; 0xb2a <__floatsisf+0x36>
 b26:	60 ff       	sbrs	r22, 0
 b28:	1b c0       	rjmp	.+54     	; 0xb60 <__floatsisf+0x6c>
 b2a:	6f 5f       	subi	r22, 0xFF	; 255
 b2c:	7f 4f       	sbci	r23, 0xFF	; 255
 b2e:	8f 4f       	sbci	r24, 0xFF	; 255
 b30:	9f 4f       	sbci	r25, 0xFF	; 255
 b32:	16 c0       	rjmp	.+44     	; 0xb60 <__floatsisf+0x6c>
 b34:	88 23       	and	r24, r24
 b36:	11 f0       	breq	.+4      	; 0xb3c <__floatsisf+0x48>
 b38:	96 e9       	ldi	r25, 0x96	; 150
 b3a:	11 c0       	rjmp	.+34     	; 0xb5e <__floatsisf+0x6a>
 b3c:	77 23       	and	r23, r23
 b3e:	21 f0       	breq	.+8      	; 0xb48 <__floatsisf+0x54>
 b40:	9e e8       	ldi	r25, 0x8E	; 142
 b42:	87 2f       	mov	r24, r23
 b44:	76 2f       	mov	r23, r22
 b46:	05 c0       	rjmp	.+10     	; 0xb52 <__floatsisf+0x5e>
 b48:	66 23       	and	r22, r22
 b4a:	71 f0       	breq	.+28     	; 0xb68 <__floatsisf+0x74>
 b4c:	96 e8       	ldi	r25, 0x86	; 134
 b4e:	86 2f       	mov	r24, r22
 b50:	70 e0       	ldi	r23, 0x00	; 0
 b52:	60 e0       	ldi	r22, 0x00	; 0
 b54:	2a f0       	brmi	.+10     	; 0xb60 <__floatsisf+0x6c>
 b56:	9a 95       	dec	r25
 b58:	66 0f       	add	r22, r22
 b5a:	77 1f       	adc	r23, r23
 b5c:	88 1f       	adc	r24, r24
 b5e:	da f7       	brpl	.-10     	; 0xb56 <__floatsisf+0x62>
 b60:	88 0f       	add	r24, r24
 b62:	96 95       	lsr	r25
 b64:	87 95       	ror	r24
 b66:	97 f9       	bld	r25, 7
 b68:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000cf4 <__fp_cmp>:
 cf4:	99 0f       	add	r25, r25
 cf6:	00 08       	sbc	r0, r0
 cf8:	55 0f       	add	r21, r21
 cfa:	aa 0b       	sbc	r26, r26
 cfc:	e0 e8       	ldi	r30, 0x80	; 128
 cfe:	fe ef       	ldi	r31, 0xFE	; 254
 d00:	16 16       	cp	r1, r22
 d02:	17 06       	cpc	r1, r23
 d04:	e8 07       	cpc	r30, r24
 d06:	f9 07       	cpc	r31, r25
 d08:	c0 f0       	brcs	.+48     	; 0xd3a <__fp_cmp+0x46>
 d0a:	12 16       	cp	r1, r18
 d0c:	13 06       	cpc	r1, r19
 d0e:	e4 07       	cpc	r30, r20
 d10:	f5 07       	cpc	r31, r21
 d12:	98 f0       	brcs	.+38     	; 0xd3a <__fp_cmp+0x46>
 d14:	62 1b       	sub	r22, r18
 d16:	73 0b       	sbc	r23, r19
 d18:	84 0b       	sbc	r24, r20
 d1a:	95 0b       	sbc	r25, r21
 d1c:	39 f4       	brne	.+14     	; 0xd2c <__fp_cmp+0x38>
 d1e:	0a 26       	eor	r0, r26
 d20:	61 f0       	breq	.+24     	; 0xd3a <__fp_cmp+0x46>
 d22:	23 2b       	or	r18, r19
 d24:	24 2b       	or	r18, r20
 d26:	25 2b       	or	r18, r21
 d28:	21 f4       	brne	.+8      	; 0xd32 <__fp_cmp+0x3e>
 d2a:	08 95       	ret
 d2c:	0a 26       	eor	r0, r26
 d2e:	09 f4       	brne	.+2      	; 0xd32 <__fp_cmp+0x3e>
 d30:	a1 40       	sbci	r26, 0x01	; 1
 d32:	a6 95       	lsr	r26
 d34:	8f ef       	ldi	r24, 0xFF	; 255
 d36:	81 1d       	adc	r24, r1
 d38:	81 1d       	adc	r24, r1
 d3a:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000e60 <__fp_inf>:
 e60:	97 f9       	bld	r25, 7
 e62:	9f 67       	ori	r25, 0x7F	; 127
 e64:	80 e8       	ldi	r24, 0x80	; 128
 e66:	70 e0       	ldi	r23, 0x00	; 0
 e68:	60 e0       	ldi	r22, 0x00	; 0
 e6a:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000ea8 <__fp_nan>:
 ea8:	9f ef       	ldi	r25, 0xFF	; 255
 eaa:	80 ec       	ldi	r24, 0xC0	; 192
 eac:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000e36 <__fp_pscA>:
 e36:	00 24       	eor	r0, r0
 e38:	0a 94       	dec	r0
 e3a:	16 16       	cp	r1, r22
 e3c:	17 06       	cpc	r1, r23
 e3e:	18 06       	cpc	r1, r24
 e40:	09 06       	cpc	r0, r25
 e42:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000e44 <__fp_pscB>:
 e44:	00 24       	eor	r0, r0
 e46:	0a 94       	dec	r0
 e48:	12 16       	cp	r1, r18
 e4a:	13 06       	cpc	r1, r19
 e4c:	14 06       	cpc	r1, r20
 e4e:	05 06       	cpc	r0, r21
 e50:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000dd4 <__fp_round>:
 dd4:	09 2e       	mov	r0, r25
 dd6:	03 94       	inc	r0
 dd8:	00 0c       	add	r0, r0
 dda:	11 f4       	brne	.+4      	; 0xde0 <__fp_round+0xc>
 ddc:	88 23       	and	r24, r24
 dde:	52 f0       	brmi	.+20     	; 0xdf4 <__fp_round+0x20>
 de0:	bb 0f       	add	r27, r27
 de2:	40 f4       	brcc	.+16     	; 0xdf4 <__fp_round+0x20>
 de4:	bf 2b       	or	r27, r31
 de6:	11 f4       	brne	.+4      	; 0xdec <__fp_round+0x18>
 de8:	60 ff       	sbrs	r22, 0
 dea:	04 c0       	rjmp	.+8      	; 0xdf4 <__fp_round+0x20>
 dec:	6f 5f       	subi	r22, 0xFF	; 255
 dee:	7f 4f       	sbci	r23, 0xFF	; 255
 df0:	8f 4f       	sbci	r24, 0xFF	; 255
 df2:	9f 4f       	sbci	r25, 0xFF	; 255
 df4:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000d3c <__fp_split3>:
 d3c:	57 fd       	sbrc	r21, 7
 d3e:	90 58       	subi	r25, 0x80	; 128
 d40:	44 0f       	add	r20, r20
 d42:	55 1f       	adc	r21, r21
 d44:	59 f0       	breq	.+22     	; 0xd5c <__fp_splitA+0x10>
 d46:	5f 3f       	cpi	r21, 0xFF	; 255
 d48:	71 f0       	breq	.+28     	; 0xd66 <__fp_splitA+0x1a>
 d4a:	47 95       	ror	r20

00000d4c <__fp_splitA>:
 d4c:	88 0f       	add	r24, r24
 d4e:	97 fb       	bst	r25, 7
 d50:	99 1f       	adc	r25, r25
 d52:	61 f0       	breq	.+24     	; 0xd6c <__fp_splitA+0x20>
 d54:	9f 3f       	cpi	r25, 0xFF	; 255
 d56:	79 f0       	breq	.+30     	; 0xd76 <__fp_splitA+0x2a>
 d58:	87 95       	ror	r24
 d5a:	08 95       	ret
 d5c:	12 16       	cp	r1, r18
 d5e:	13 06       	cpc	r1, r19
 d60:	14 06       	cpc	r1, r20
 d62:	55 1f       	adc	r21, r21
 d64:	f2 cf       	rjmp	.-28     	; 0xd4a <__fp_split3+0xe>
 d66:	46 95       	lsr	r20
 d68:	f1 df       	rcall	.-30     	; 0xd4c <__fp_splitA>
 d6a:	08 c0       	rjmp	.+16     	; 0xd7c <__fp_splitA+0x30>
 d6c:	16 16       	cp	r1, r22
 d6e:	17 06       	cpc	r1, r23
 d70:	18 06       	cpc	r1, r24
 d72:	99 1f       	adc	r25, r25
 d74:	f1 cf       	rjmp	.-30     	; 0xd58 <__fp_splitA+0xc>
 d76:	86 95       	lsr	r24
 d78:	71 05       	cpc	r23, r1
 d7a:	61 05       	cpc	r22, r1
 d7c:	08 94       	sec
 d7e:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000e52 <__fp_zero>:
 e52:	e8 94       	clt

00000e54 <__fp_szero>:
 e54:	bb 27       	eor	r27, r27
 e56:	66 27       	eor	r22, r22
 e58:	77 27       	eor	r23, r23
 e5a:	cb 01       	movw	r24, r22
 e5c:	97 f9       	bld	r25, 7
 e5e:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000e8e <__gesf2>:
 e8e:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <__fp_cmp>
 e92:	08 f4       	brcc	.+2      	; 0xe96 <__gesf2+0x8>
 e94:	8f ef       	ldi	r24, 0xFF	; 255
 e96:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000ea0 <__mulsf3>:
 ea0:	0e 94 aa 03 	call	0x754	; 0x754 <__mulsf3x>
 ea4:	0c 94 ea 06 	jmp	0xdd4	; 0xdd4 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00000754 <__mulsf3x>:
 754:	0f c0       	rjmp	.+30     	; 0x774 <__mulsf3x+0x20>
 756:	0e 94 1b 07 	call	0xe36	; 0xe36 <__fp_pscA>
 75a:	38 f0       	brcs	.+14     	; 0x76a <__mulsf3x+0x16>
 75c:	0e 94 22 07 	call	0xe44	; 0xe44 <__fp_pscB>
 760:	20 f0       	brcs	.+8      	; 0x76a <__mulsf3x+0x16>
 762:	95 23       	and	r25, r21
 764:	11 f0       	breq	.+4      	; 0x76a <__mulsf3x+0x16>
 766:	0c 94 30 07 	jmp	0xe60	; 0xe60 <__fp_inf>
 76a:	0c 94 54 07 	jmp	0xea8	; 0xea8 <__fp_nan>
 76e:	11 24       	eor	r1, r1
 770:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <__fp_szero>
 774:	0e 94 9e 06 	call	0xd3c	; 0xd3c <__fp_split3>
 778:	70 f3       	brcs	.-36     	; 0x756 <__mulsf3x+0x2>

0000077a <__mulsf3_pse>:
 77a:	95 9f       	mul	r25, r21
 77c:	c1 f3       	breq	.-16     	; 0x76e <__mulsf3x+0x1a>
 77e:	95 0f       	add	r25, r21
 780:	50 e0       	ldi	r21, 0x00	; 0
 782:	55 1f       	adc	r21, r21
 784:	62 9f       	mul	r22, r18
 786:	f0 01       	movw	r30, r0
 788:	72 9f       	mul	r23, r18
 78a:	bb 27       	eor	r27, r27
 78c:	f0 0d       	add	r31, r0
 78e:	b1 1d       	adc	r27, r1
 790:	63 9f       	mul	r22, r19
 792:	aa 27       	eor	r26, r26
 794:	f0 0d       	add	r31, r0
 796:	b1 1d       	adc	r27, r1
 798:	aa 1f       	adc	r26, r26
 79a:	64 9f       	mul	r22, r20
 79c:	66 27       	eor	r22, r22
 79e:	b0 0d       	add	r27, r0
 7a0:	a1 1d       	adc	r26, r1
 7a2:	66 1f       	adc	r22, r22
 7a4:	82 9f       	mul	r24, r18
 7a6:	22 27       	eor	r18, r18
 7a8:	b0 0d       	add	r27, r0
 7aa:	a1 1d       	adc	r26, r1
 7ac:	62 1f       	adc	r22, r18
 7ae:	73 9f       	mul	r23, r19
 7b0:	b0 0d       	add	r27, r0
 7b2:	a1 1d       	adc	r26, r1
 7b4:	62 1f       	adc	r22, r18
 7b6:	83 9f       	mul	r24, r19
 7b8:	a0 0d       	add	r26, r0
 7ba:	61 1d       	adc	r22, r1
 7bc:	22 1f       	adc	r18, r18
 7be:	74 9f       	mul	r23, r20
 7c0:	33 27       	eor	r19, r19
 7c2:	a0 0d       	add	r26, r0
 7c4:	61 1d       	adc	r22, r1
 7c6:	23 1f       	adc	r18, r19
 7c8:	84 9f       	mul	r24, r20
 7ca:	60 0d       	add	r22, r0
 7cc:	21 1d       	adc	r18, r1
 7ce:	82 2f       	mov	r24, r18
 7d0:	76 2f       	mov	r23, r22
 7d2:	6a 2f       	mov	r22, r26
 7d4:	11 24       	eor	r1, r1
 7d6:	9f 57       	subi	r25, 0x7F	; 127
 7d8:	50 40       	sbci	r21, 0x00	; 0
 7da:	9a f0       	brmi	.+38     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7dc:	f1 f0       	breq	.+60     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 7de:	88 23       	and	r24, r24
 7e0:	4a f0       	brmi	.+18     	; 0x7f4 <__mulsf3_pse+0x7a>
 7e2:	ee 0f       	add	r30, r30
 7e4:	ff 1f       	adc	r31, r31
 7e6:	bb 1f       	adc	r27, r27
 7e8:	66 1f       	adc	r22, r22
 7ea:	77 1f       	adc	r23, r23
 7ec:	88 1f       	adc	r24, r24
 7ee:	91 50       	subi	r25, 0x01	; 1
 7f0:	50 40       	sbci	r21, 0x00	; 0
 7f2:	a9 f7       	brne	.-22     	; 0x7de <__mulsf3_pse+0x64>
 7f4:	9e 3f       	cpi	r25, 0xFE	; 254
 7f6:	51 05       	cpc	r21, r1
 7f8:	80 f0       	brcs	.+32     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 7fa:	0c 94 30 07 	jmp	0xe60	; 0xe60 <__fp_inf>
 7fe:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <__fp_szero>
 802:	5f 3f       	cpi	r21, 0xFF	; 255
 804:	e4 f3       	brlt	.-8      	; 0x7fe <__mulsf3_pse+0x84>
 806:	98 3e       	cpi	r25, 0xE8	; 232
 808:	d4 f3       	brlt	.-12     	; 0x7fe <__mulsf3_pse+0x84>
 80a:	86 95       	lsr	r24
 80c:	77 95       	ror	r23
 80e:	67 95       	ror	r22
 810:	b7 95       	ror	r27
 812:	f7 95       	ror	r31
 814:	e7 95       	ror	r30
 816:	9f 5f       	subi	r25, 0xFF	; 255
 818:	c1 f7       	brne	.-16     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 81a:	fe 2b       	or	r31, r30
 81c:	88 0f       	add	r24, r24
 81e:	91 1d       	adc	r25, r1
 820:	96 95       	lsr	r25
 822:	87 95       	ror	r24
 824:	97 f9       	bld	r25, 7
 826:	08 95       	ret

Disassembly of section .text.libgcc:

00000e6c <__tablejump2__>:
 e6c:	ee 0f       	add	r30, r30
 e6e:	ff 1f       	adc	r31, r31
 e70:	05 90       	lpm	r0, Z+
 e72:	f4 91       	lpm	r31, Z
 e74:	e0 2d       	mov	r30, r0
 e76:	09 94       	ijmp

Disassembly of section .text.avrlibc:

00000e78 <abs>:
 e78:	97 ff       	sbrs	r25, 7
 e7a:	03 c0       	rjmp	.+6      	; 0xe82 <abs+0xa>
 e7c:	91 95       	neg	r25
 e7e:	81 95       	neg	r24
 e80:	91 09       	sbc	r25, r1
 e82:	08 95       	ret
